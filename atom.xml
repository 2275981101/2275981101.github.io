<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>welcome</title>
  
  <subtitle>求知若饥，虚心若愚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-14T02:46:15.375Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wanghai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3动画</title>
    <link href="http://yoursite.com/2018/12/13/CSS3%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2018/12/13/CSS3动画/</id>
    <published>2018-12-13T09:55:59.000Z</published>
    <updated>2018-12-14T02:46:15.375Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS3，我们可以创建动画，它可以取代许多网页动画图像，Flash动画，和JAVAScripts。</strong></p><style>            #ppxiong{                width: 76px;                height: 47px;                background: #92B901 none repeat scroll 0% 0%;                position: relative;                color: #fff;                font-weight: bold;                font-size: 20px;                padding: 10px;                border-radius: 5px;                animation: first 5s ease 0s normal none 3 running;            }            @keyframes first            {                0% {background: red;  transform: rotate(0deg);left: 0;}                25%{background: pink; transform: rotate(20deg);left: 0;}                50%{background: blue; transform: rotate(0deg);left: 500px;}                55%{background: green; transform: rotate(0deg);left: 500px;}                70%{background: #1ec7e6; transform: rotate(0deg);left: 500px;}                100% {background: yellow; transform: rotate(-360deg);left: 0;}            }</style><div id="ppxiong">CSS3</div><p>浏览器支持<br>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。</p><p>当在@keyframe创建动画，把它绑定到一个选择器，否则动画不会有任何效果。<br>指定至少这两个CSS3的动画属性绑定向一个选择器：</p><ul><li><p>规定动画的名称</p></li><li><p>规定动画的时长</p></li></ul><style>        #showtime{            width: 100px;            height: 100px;            background: red;            animation: myfirst 5s;        }        @keyframes myfirst        {            from {background: red;}            to {background: yellow;}        }</style><div id="showtime"></div><pre><code>把 &quot;myfirst&quot; 动画捆绑到 div 元素，时长：5 秒：&lt;style&gt;   div{        width: 100px;        height: 100px;        background: red;        animation: myfirst 5s;    }   @keyframes myfirst   {        from {background:red;}        to {background:yellow;}    }&lt;/style&gt;&lt;div&gt;&lt;/div&gt;</code></pre><p>必须定义动画的名称和动画的持续时间。如果省略的持续时间，动画将无法运行，因为默认值是0。</p><font color="red"><strong>CSS3动画是什么？</strong></font><p>• 动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><p>• 您可以改变任意多的样式任意多的次数。</p><p>• 请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p><p>• 0% 是动画的开始，100% 是动画的完成。</p><p>• 为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><pre><code>&lt;style&gt; div{    width:100px;    height:100px;    background:red;    animation:myfirst 5s;    -moz-animation:myfirst 5s; /* Firefox */    -webkit-animation:myfirst 5s; /* Safari and Chrome */    -o-animation:myfirst 5s; /* Opera */}@keyframes myfirst{    0%   {background:red;}    25%  {background:yellow;}    50%  {background:blue;}    100% {background:green;}}@-moz-keyframes myfirst /* Firefox */{    0%   {background:red;}    25%  {background:yellow;}    50%  {background:blue;}    100% {background:green;}}@-webkit-keyframes myfirst /* Safari and Chrome */{    0%   {background:red;}    25%  {background:yellow;}    50%  {background:blue;}    100% {background:green;}}@-o-keyframes myfirst /* Opera */{    0%   {background:red;}    25%  {background:yellow;}    50%  {background:blue;}    100% {background:green;}}&lt;/style&gt;&lt;div&gt;&lt;/div&gt; </code></pre><font color="red"><strong>CSS3的动画属性</strong></font><pre><code>@keyframes                  关键帧: 规定动画animation                   所有动画属性的简写属性,除了animation-play-state animation-name              规定 @keyframes 动画的名称animation-duration          规定动画完成一个周期所花费的秒或毫秒。默认是 0animation-timing-function   规定动画的速度曲线(运动速度函数)。默认是 &quot;ease&quot;animation-delay             规定动画何时开始(延迟时间)。默认是 0animation-iteration-count   规定动画执行的次数  infinite(无限循环)animation-direction         规定动画是否在下一周期逆向地播放。默认是 &quot;normal&quot;animation-fill-mode         属性规定动画在播放之前或之后，其动画效果是否可见animation-play-state        规定动画是否正在运行或暂停。默认是 &quot;running&quot;</code></pre><style>    #CSS3animation{        width: 100px;        height: 100px;        background: red;        position: relative;        animation: animationdemo 3s ease 2s infinite alternate-reverse running;    }      @keyframes animationdemo    {        0%   {background:red; left:0px; top:0px;}        15%  {background:yellow; left:300px; top:0px;}        30%  {background:blue; left:300px; top:100px;}        45%  {background:green; left:600px; top:100px;}        60%  {background:green; left:300px; top:100px;}        75%  {background:yellow; left:300px; top:0px;}        100%   {background:red; left:0px; top:0px;}    }    @-webkit-keyframes animationdemo    {        0%   {background:red; left:0px; top:0px;}        15%  {background:yellow; left:300px; top:0px;}        30%  {background:blue; left:300px; top:100px;}        45%  {background:green; left:600px; top:100px;}        60%  {background:green; left:300px; top:100px;}        75%  {background:yellow; left:300px; top:0px;}        100%   {background:red; left:0px; top:0px;}    }   </style><div id="CSS3animation"></div><pre><code>&lt;style&gt;#demo{    width: 100px;    height: 100px;    background: red;    position: relative;    animation: animationdemo 3s ease 2s infinite alternate-reverse running;}  @keyframes animationdemo{    0%   {background:red; left:0px; top:0px;}    15%  {background:yellow; left:300px; top:0px;}    30%  {background:blue; left:300px; top:100px;}    45%  {background:green; left:600px; top:100px;}    60%  {background:green; left:300px; top:100px;}    75%  {background:yellow; left:300px; top:0px;}    100%   {background:red; left:0px; top:0px;}}@-webkit-keyframes animationdemo{    0%   {background:red; left:0px; top:0px;}    15%  {background:yellow; left:300px; top:0px;}    30%  {background:blue; left:300px; top:100px;}    45%  {background:green; left:600px; top:100px;}    60%  {background:green; left:300px; top:100px;}    75%  {background:yellow; left:300px; top:0px;}    100%   {background:red; left:0px; top:0px;}}   &lt;/style&gt;&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;CSS3，我们可以创建动画，它可以取代许多网页动画图像，Flash动画，和JAVAScripts。&lt;/strong&gt;&lt;/p&gt;
&lt;style&gt;
            #ppxiong{
                width: 76px;
       
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3渐变</title>
    <link href="http://yoursite.com/2018/12/12/CSS3%E6%B8%90%E5%8F%98/"/>
    <id>http://yoursite.com/2018/12/12/CSS3渐变/</id>
    <published>2018-12-12T09:55:59.000Z</published>
    <updated>2018-12-14T08:49:34.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CSS3-渐变（Gradients）"><a href="#CSS3-渐变（Gradients）" class="headerlink" title="CSS3 渐变（Gradients）"></a>CSS3 渐变（Gradients）</h4><div id="gradl11" style="font-size: 36px ;text-align: center;height: 55px;line-height:55px;background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);">Gradient Background</div><ul><li>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</li><li>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的事件和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</li><li>CSS3 定义了两种类型的渐变（gradients）：<br>1.<font color="red"><strong>线性渐变（Linear Gradients）</strong></font>- 向下/向上/向左/向右/对角方向<br>2.<font color="red"><strong>径向渐变（Radial Gradients）</strong></font>- 由它们的中心定义</li></ul><p><strong>浏览器支持</strong></p><p>后边跟 -webkit-、-moz- 或 -o- 的数字指定了需加上前缀才能支持属性的第一个版本。</p><p>完全支持该属性(4个属性)的第一个浏览器版本。</p><pre><code>IE          10.0chrome      26.0  10.0-webkit-Firefox     16.0  3.6 -moz-Safari      6.1   5.1 -webkit-Opera       12.1  11.1 -o-</code></pre><h4 id="CSS3-线性渐变"><a href="#CSS3-线性渐变" class="headerlink" title="CSS3 线性渐变"></a>CSS3 线性渐变</h4><p>为了创建一个线性渐变，你必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以设置一个起点和一个方向（或一个角度）。</p><p><strong>语法</strong></p><pre><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);  </code></pre><p><strong>线性渐变 - 从上到下（默认情况下）</strong></p><div id="gradl1" style="height: 200px;background: linear-gradient(red, blue);"></div><pre><code>&lt;style&gt;    #grad1 {        height: 200px;        background: -webkit-linear-gradient(red, blue); /* Safari 5.1 - 6.0 */        background: -o-linear-gradient(red, blue); /* Opera 11.1 - 12.0 */        background: -moz-linear-gradient(red, blue); /* Firefox 3.6 - 15 */        background: linear-gradient(red, blue); /* 标准的语法（必须放在最后） */    }&lt;/style&gt;&lt;div id=&quot;grad1&quot;&gt;&lt;/div&gt;</code></pre><p><strong>线性渐变 - 从左到右</strong></p><div style="height: 200px; background: linear-gradient(to right, red, blue);"></div><pre><code>#grad1 {    height: 200px;    background: linear-gradient(to right, red , blue); }</code></pre><p><strong>线性渐变 - 对角</strong><br>从左上角开始（到右下角）的线性渐变。起点是红色，慢慢过渡到蓝色：</p><div style="height: 200px;background: linear-gradient(to bottom right, red, blue);"></div><pre><code>#grad1 {    height: 200px;    background: linear-gradient(to bottom right, red , blue); }</code></pre><p><strong>使用角度</strong></p><p>如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。</p><pre><code>background: linear-gradient(angle, color-stop1, color-stop2);     </code></pre><p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p><p><img src="https://i.imgur.com/NhvHymM.png" alt=""></p><p>下面的实例演示了如何在线性渐变上使用角度：</p><pre><code>0deg - 从下到上background: linear-gradient(0deg, red, blue);</code></pre><div style="height: 100px;background: linear-gradient(0deg, red, blue);"></div><pre><code>90deg - 从左到右background: linear-gradient(90deg, red, blue);</code></pre><div style="height: 100px;background: linear-gradient(90deg, red, blue);"></div><br>        180deg - 从上到下<br>        background: linear-gradient(180deg, red, blue);<br><div style="height: 100px;background: linear-gradient(180deg, red, blue);"></div><br>        -90deg - 从右到左<br>        background: linear-gradient(-90deg, red, blue);<br><div style="height: 100px;background: linear-gradient(-90deg, red, blue);"></div><br><br><br><br><strong>使用多个颜色结点</strong><br><br><br><div style=" height: 200px;background: linear-gradient(red, green, blue);"></div>    <pre><code>3 个颜色结点（均匀分布）background: linear-gradient(red, green, blue);</code></pre><div style="height: 200px;background: linear-gradient(red 10%, green 85%, blue 90%);"></div><pre><code>3 个颜色结点（不均匀分布）background: linear-gradient(red 10%, green 85%, blue 90%);</code></pre><div style="height: 200px;background: linear-gradient(red, orange,  yellow, green, blue,indigo, violet);"></div><pre><code>7 个颜色结点（均匀分布）background: linear-gradient(red, orange,  yellow, green, blue, indigo, violet);</code></pre><h4 id="创建一个带有彩虹颜色和文本的线性渐变"><a href="#创建一个带有彩虹颜色和文本的线性渐变" class="headerlink" title="创建一个带有彩虹颜色和文本的线性渐变"></a>创建一个带有彩虹颜色和文本的线性渐变</h4><pre><code>#grad1 {    height: 55px;    background: -webkit-linear-gradient(left, red, orange, yellow, green, blue, indigo, violet); /* Safari 5.1 - 6.0 */    background: -o-linear-gradient(left, red, orange, yellow, green, blue, indigo, violet); /* Opera 11.1 - 12.0 */    background: -moz-linear-gradient(left, red, orange, yellow, green, blue, indigo, violet); /* Firefox 3.6 - 15 */    background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); /* 标准的语法（必须放在最后） */}</code></pre><p><strong>使用透明度（Transparency）</strong></p><p>CSS3 渐变也支持透明度（transparency），可用于创建减弱变淡的效果。</p><p>为了添加透明度，我们使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。</p><p>下面的实例演示了从左边开始的线性渐变。起点是完全透明，慢慢过渡到完全不透明的红色：</p><div style="height: 200px;background: linear-gradient(to right, rgba(255, 0, 0, 0), rgba(255, 0, 0, 1));"></div><pre><code>background: linear-gradient(to right, rgba(255, 0, 0, 0), rgba(255, 0, 0, 1));</code></pre><p><strong>重复的线性渐变</strong></p><p>repeating-linear-gradient() 函数用于重复线性渐变：</p><div style="height: 200px;background: repeating-linear-gradient(red, yellow 10%, green 20%);"></div><pre><code>background: repeating-linear-gradient(red, yellow 10%, green 20%);</code></pre><h4 id="CSS3-径向渐变"><a href="#CSS3-径向渐变" class="headerlink" title="CSS3 径向渐变"></a>CSS3 径向渐变</h4><p>径向渐变由它的中心定义。</p><p>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。</p><p><strong>语法</strong></p><pre><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></pre><p><strong>径向渐变 - 颜色结点均匀分布（默认情况下）</strong></p><div style="height: 150px;width: 200px;background: radial-gradient(red, orange, violet);"></div><pre><code>#gradl1{       height: 150px;       width: 200px;       background: radial-gradient(red, orange, violet);   }   </code></pre><p><strong>径向渐变 - 颜色结点不均匀分布</strong></p><div style="height: 150px;width: 200px;background: radial-gradient(red 5%, orange 15%, violet 60%);"></div><pre><code>#gradl1{       height: 150px;       width: 200px;       background: radial-gradient(red 5%, orange 15%, violet 60%);   } </code></pre><p><strong>设置形状</strong></p><p>shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。</p><div style="height: 150px;width: 200px;background: radial-gradient( red, yellow, green);"></div><pre><code>#gradl1{        height: 150px;        width: 200px;        background: radial-gradient(red, yellow, green);    }</code></pre><div style="height: 150px;width: 200px;background: radial-gradient(circle ,  red, yellow, green);"></div><pre><code>#gradl1{        height: 150px;        width: 200px;        background: radial-gradient(circle, red, yellow, green);    }</code></pre><p><strong>不同尺寸大小关键字的使用</strong></p><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><p><strong>• closest-side</strong><br><strong>• farthest-side</strong><br><strong>• closest-corner</strong><br><strong>• farthest-corner</strong></p><div style="height: 150px;width: 150px;background: -webkit-radial-gradient(60% 55%, closest-side,blue,green,yellow,black);"></div><pre><code>background: -webkit-radial-gradient(60% 55%, closest-side,blue,green,yellow,black);</code></pre><div style="height: 150px;width: 150px;background: -webkit-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);"></div><pre><code>background: -webkit-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black);</code></pre><div style="height: 150px;width: 150px;background: -webkit-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black);"></div><pre><code>background: -webkit-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black);</code></pre><div style="height: 150px;width: 150px;background: -webkit-radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black);"></div><pre><code>background: -webkit-radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black);</code></pre><p><strong>重复的径向渐变</strong></p><p>repeating-radial-gradient() 函数用于重复径向渐变：</p><div style="height: 150px;width: 200px;background: repeating-radial-gradient(   #EE2C2C, black 20%)"></div><pre><code>#gradl{    height: 150px;    width: 200px;    background: repeating-radial-gradient(#EE2C2C, black 20%);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;CSS3-渐变（Gradients）&quot;&gt;&lt;a href=&quot;#CSS3-渐变（Gradients）&quot; class=&quot;headerlink&quot; title=&quot;CSS3 渐变（Gradients）&quot;&gt;&lt;/a&gt;CSS3 渐变（Gradients）&lt;/h4&gt;&lt;div id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3弹性盒子</title>
    <link href="http://yoursite.com/2018/11/18/CSS3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
    <id>http://yoursite.com/2018/11/18/CSS3弹性盒子/</id>
    <published>2018-11-18T09:55:59.000Z</published>
    <updated>2018-12-14T02:53:19.569Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3图片翻书展示()</title>
    <link href="http://yoursite.com/2018/11/17/CSS3%E5%9B%BE%E7%89%87%E7%BF%BB%E4%B9%A6%E5%B1%95%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/11/17/CSS3图片翻书展示/</id>
    <published>2018-11-17T09:20:12.000Z</published>
    <updated>2018-12-14T02:53:13.257Z</updated>
    
    <content type="html"><![CDATA[<pre><code>&lt;style&gt;        *{            margin: 0;            padding: 0;        }        body{            background-color: #fde3A7;            font-family: &apos;Indie Flower&apos;, cursive;/*字体  草书*/        }        .card{            width: 270px;            height: 400px;            position: absolute;            left: 50%;            top: 50%;            /* transform: translateX(-50%) translateY(-50%);CSS3 平移 */            margin-top: -200px;            margin-left: -150px;            box-shadow: inset 300px 0px 50px rgba(0, 0, 0, .5),20px 0 60px rgba(0, 0, 0, .5);/*阴影*/            perspective: 2000px;            transform-style: preserve-3d;            /* transform-origin: center center; */            transition:  all 1s ease-in-out;            background-color: #fff;        }        .card::before{  /*伪类和伪元素的区别  伪元素是真实存在的元素,能在html元素中存在的*/            content: &quot;&quot;;            display: inline-block;            width: 100%;            height: 5px;            background-color: #BAC1BA;            position: absolute;            top: -5px;            transform: skewX(-45deg);/*CSS3 扭曲*/            transform-origin: bottom;/*改变旋转中心*/        }        .card::after{            position: absolute;            right: -5px;             top: 0;            content: &quot;&quot;;            display: inline-block;            height: 100%;            width: 5px;            background-color: #BAC1BA;            transform: skewY(-45deg);/*CSS3 扭曲*/            transform-origin: left;        }        .card .imgBox{            position: absolute;            width: 100%;            height: 100%;            transform-origin: left;            transition:  all .7s ease-in-out;/*过渡*/        }        .card .imgBox .bark{            position: absolute;            width: 100%;            height: 100%;            background-color: #fff;            opacity: 0;            transition: all .6s ease-in-out;        }        .card .imgBox img{            width: 100%;        }        .card .details{            position: absolute;            width: 100%;            height: 100%;            top: 0;            left: 0;            z-index: -1;        }        .card:hover{   /*伪类是当前动作触发的*/             transform: rotateZ(15deg) scale(1.2);               box-shadow: inset 30px 0px 50px rgba(0, 0, 0, .5), 20px 0px 60px rgba(0, 0, 0, .5);        }        .card:hover .imgBox{            transform: rotateY(-135deg);        }        .card:hover .imgBox .bark{            opacity: 1;            transition:  all .6s ease-in-out;            box-shadow: inset 300px 200px 100px rgba(0, 0, 0, .5);         }    &lt;/style&gt;    &lt;div class=&quot;card&quot;&gt;        &lt;div class=&quot;imgBox&quot;&gt;            &lt;div class=&quot;bark&quot;&gt;&lt;/div&gt;            &lt;img src=&quot;./images/pic.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;!-- 翻开展示内容 --&gt;        &lt;div class=&quot;details&quot;&gt;            &lt;!-- 这里没有写第二页内容用图片代替 --&gt;            &lt;img src=&quot;./images/pic_.jpg&quot; alt=&quot;&quot;&gt;            &lt;!-- &lt;h4 class=&quot;title1&quot;&gt;内容标题1&lt;/h4&gt;            &lt;h4 class=&quot;title2&quot;&gt;内容标题2&lt;/h4&gt;            &lt;p&gt;内容...&lt;/p&gt;            &lt;p&gt;内容...&lt;/p&gt; --&gt;        &lt;/div&gt;    &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
        *{
            margin: 0;
            padding: 0;
        }
        body{
            background-color: #fd
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3之calc()</title>
    <link href="http://yoursite.com/2018/11/16/CSS3%E4%B9%8Bcalc()/"/>
    <id>http://yoursite.com/2018/11/16/CSS3之calc()/</id>
    <published>2018-11-16T09:18:33.000Z</published>
    <updated>2018-12-13T07:39:40.782Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red"></font></p><h4 id="什么是calc"><a href="#什么是calc" class="headerlink" title="什么是calc()?"></a><font color="red">什么是calc()?</font></h4><p><strong>calc()</strong>从字面我们可以把他理解为一个函数function.其实calc是英文单词calculate(计算)的缩写,是css3的一个新增的功能,用来指定元素的长度.比如说,你可以使用calc()给元素的border、margin、pading、font-size和width等属性设置<font color="red">动态值</font>.为何说是动态值呢?因为我们使用的表达式来得到的值.不过calc()最大的好处就是用在流体布局上,可以通过calc()计算得到元素的宽度.</p><h4 id="calc-能做什么"><a href="#calc-能做什么" class="headerlink" title="calc()能做什么?"></a><font color="red">calc()能做什么?</font></h4><p><font color="red">calc()能让你给元素的做计算</font>,你可以给一个div元素,使用百分比、em、px和rem单位值计算出其宽度或者高度,比如说”width:calc(50% + 2em)”,这样一来你就不用考虑元素DIV的宽度值到底是多少,而把这个烦人的任务交由浏览器去计算.</p><h4 id="calc-语法"><a href="#calc-语法" class="headerlink" title="calc()语法"></a><font color="red">calc()语法</font></h4><p>calc()语法非常简单,就像我们小时候学加(+)、减(-)、乘(*)、除(/)一样,使用数学表达式来表示:</p><pre><code>.elm{    width: calc(expression)}</code></pre><p>其中”expression”是一个表达式，用来计算长度的表达式.</p><h4 id="calc-的运算规则"><a href="#calc-的运算规则" class="headerlink" title="calc()的运算规则"></a><font color="red">calc()的运算规则</font></h4><p>calc()使用通用的数学运算规则,但是也提供更智能的功能:</p><p>• 使用”+”、”-“、”*” 和 “/“四则运算;</p><p>• 可以使用百分比、px、em、rem等单位;</p><p>• 可以混合使用各种单位进行计算;</p><p>• 表达式中有”+”和”-“时,其<font color="red">前后必须要有空格</font>,如”widht: calc(12%+5em)”这种没有空格的写法是错误的;</p><p>• 表达式中有”*”和”/“时,其<font color="red">前后可以没有空格</font>,但建议留有空格.</p><h4 id="浏览器的兼容性"><a href="#浏览器的兼容性" class="headerlink" title="浏览器的兼容性"></a><font color="red">浏览器的兼容性</font></h4><p>浏览器对calc()的兼容性还算不错,在IE9+、FF4.0+、Chrome19+、Safari6+都得到较好支持,同样需要在其前面加上各浏览器厂商的识别符,不过可惜的是,移动端的浏览器还没仅有“firefox for android 14.0”支持,其他的全军覆没.大家在实际使用时,同样需要添加浏览器的前缀</p><pre><code>.elm {    //Firefox    -moz-calc(expression);    //chrome safari    -webkit-calc(expression);    //Standard    calc();}</code></pre><p><strong>例1.</strong></p><pre><code>.demo{    width: 300px;    background: #60f;    padding: 3px 0;}.box{    background: #f60;    height: 50px;    padding: 10px;    border: 5px solid green;    width: 90%;/*写给不支持calc()的浏览器*/    width: -moz-calc(100% - (10px + 5px) * 2);    width: -webkit-calc(100% - (10px + 5px) * 2);    width: calc(100% - (10px + 5px) * 2);}&lt;div class=&quot;demo&quot;&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;</code></pre><p><img src="https://i.imgur.com/HugB59A.png" alt=""></p><p><strong>例2.</strong></p><pre><code>body{       background: #E8EADD;       color: #3C323A;       padding: 20px;   }   /*设置主容器&quot;wrapper&quot;     主容器的宽度是:&quot;100% - 20px * 2,并且水平居中&quot;   */   .wrapper{       width: 1024px;/*写给不支持calc()的浏览器*/       width: -moz-calc(100% - 40px);       width: -webkit-calc(100% - 40px);       width: calc(100% - 40px);       margin: auto;   }   /*给header和footer设置样式     对应的宽度是:&quot;100% - 20px * 2   */   #header{       background: #f60;       padding: 20px;       width: 984px;       width: -moz-calc(100% - 40px);       width: -webkit-calc(100% - 40px);       width: calc(100% - 40px);   }   #footer{       clear: both;       background: #000;       padding: 20px;       color: #fff;       width: 984px;       width: -moz-calc(100% - 40px);       width: -webkit-calc(100% - 40px);       width: calc(100% - 40px);   }   /*给主内容设置样式     给主内容设置一个8px的边框,20px的内距,并且向左浮动,同时设置一个向右的外边距&quot;20&quot;px     关键之处,我们主内容占容器宽度的75%,这样一来,主内容的宽度应该是:     &quot;75% - 8px * 2 - 20px * 2&quot;   */   #main{       border: 8px solid #B8C172;       float: left;       padding: 20px;       margin-right: 20px;       margin-bottom: 20px;       width: 704px;       width: -moz-calc(75% - 20px * 2 - 8px * 2);       width: -webkit-calc(75% - 20px * 2 - 8px * 2);       width: calc(75% - 20px * 2 - 8px * 2);   }   /*设置右边栏样式     给边栏设置一个25%的宽度,其除了包含8px的边框,10px的内距外,还有主内容外距20px也要去掉     不然整个宽度与容器会相差20px,换句话说就会撑破容器掉下来.因此边栏的实际宽度应该是:     &quot;25% - 10px * 2 - 8px * 2 -20px&quot;     */   #accessory{       border: 8px solid #B8C172;       float: left;       padding: 10px;       width: 208px;       width: -moz-calc(25% - 10px * 2 - 8px * 2 - 20px);       width: -webkit-calc(25% - 10px * 2 - 8px * 2 - 20px);       width: calc(25% - 10px * 2 - 8px * 2 - 20px);   }   &lt;div class=&quot;wrapper&quot;&gt;       &lt;div id=&quot;header&quot;&gt;header&lt;/div&gt;       &lt;div id=&quot;main&quot;&gt;main&lt;/div&gt;       &lt;div id=&quot;accessory&quot;&gt;accessory&lt;/div&gt;       &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;   &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/gF8nD6v.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&quot;什么是calc&quot;&gt;&lt;a href=&quot;#什么是calc&quot; class=&quot;headerlink&quot; title=&quot;什么是calc()?&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;什么是calc()?&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3之阴影</title>
    <link href="http://yoursite.com/2018/11/15/CSS3%E4%B9%8B%E9%98%B4%E5%BD%B1/"/>
    <id>http://yoursite.com/2018/11/15/CSS3之阴影/</id>
    <published>2018-11-15T09:17:33.000Z</published>
    <updated>2018-12-13T07:39:36.171Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-盒子阴影"><a href="#1-盒子阴影" class="headerlink" title="1. 盒子阴影"></a><font color="red">1. 盒子阴影</font></h4><font color="red"><strong>box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</strong></font><p>例如  box-shadow:4px 2px 6px 7px #333333 inset;</p><p>同一盒子，可以同时加多个阴影，阴影之间用”,”隔开</p><p>例如  box-shadow:4px 2px 6px #f00,-4px -2px 6px #000,0px 0px 12px 5px #33CC00 inset;</p><h4 id="2-字体阴影"><a href="#2-字体阴影" class="headerlink" title="2. 字体阴影"></a><font color="red">2. 字体阴影</font></h4><p>text-shadow:X-Offset Y-Offset blur color;</p><ol><li><font color="red">X-Offset</font>:表示阴影的水平偏移距离,其值为正值时阴影向右偏移,反之向左偏移;</li><li><font color="red">Y-Offset</font>:是指阴影的垂直偏移距离,如果其值是正值时,阴影向下偏移,反之向上偏移;</li><li><font color="red">Blur</font>:是指阴影的模糊程度,其值不能是负值,如果值越大,阴影越模糊,反之阴影越清晰,如果不需要阴影模糊可以将Blur值设置为0;</li><li><font color="red">Color</font>:是指阴影的颜色,其可以使用rgba色;</li></ol><pre><code>*{    margin: 0;    padding: 0;}div{    /*3. 实现书摆放在桌子上的效果*/    width: 200px;    height: 200px;    background-color: red;    position: absolute;    top: 50%;    left: 50%;    transform: translate(-50%,-50%);    background: #e0e1dc;    text-align: center;    line-height: 200px;    color: #fff;    font-weight: 900;    font-size: 24px;    text-shadow: 5px 2px 3px grey;    box-shadow: 10px 0 10px 0 grey;}&lt;div&gt;This is a page&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/nllEayT.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-盒子阴影&quot;&gt;&lt;a href=&quot;#1-盒子阴影&quot; class=&quot;headerlink&quot; title=&quot;1. 盒子阴影&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;1. 盒子阴影&lt;/font&gt;&lt;/h4&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;box-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3新增背景属性</title>
    <link href="http://yoursite.com/2018/11/14/CSS3%E6%96%B0%E5%A2%9E%E8%83%8C%E6%99%AF%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/11/14/CSS3新增背景属性/</id>
    <published>2018-11-14T09:17:33.000Z</published>
    <updated>2018-12-14T02:49:30.944Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-background-origin-背景的起始位置"><a href="#1-background-origin-背景的起始位置" class="headerlink" title="1.background-origin 背景的起始位置"></a><font color="red">1.background-origin 背景的起始位置</font></h4><p> background-origin: border-box || padding-box || content-box;</p><p> background-Origin属性指定了背景图像的位置区域。</p><p> content-box, padding-box,和 border-box区域内可以放置背景图像。</p><p><img src="https://i.imgur.com/6sqcM3E.png" alt=""></p><p>效果: 设置的盒子存在 border padding content(用户设置的width height)</p><p>1.padding-box(默认值); 设置背景图片的位置从padding(内边距)开始放置</p><pre><code>将border设置为透明，方便查看不同属性的效果div{        width: 600px;        height: 400px;         padding: 30px;        border: 50px solid rgba(104, 104, 98, .3);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: 100%;        background-origin: padding-box;    }&lt;div&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/FfrdQdM.png" alt=""></p><p>2.border-box; 设置背景图片的起始位置从border开始 </p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 50px solid rgba(104, 104, 98, .3);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: 100%;        background-origin: border-box;    }</code></pre><p><img src="https://i.imgur.com/HqhZHyP.png" alt=""></p><p>3.content-box; 设置背景图片的位置从用户设置的内容区开始放置</p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 50px solid rgba(104, 104, 98, .3);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: 100%;        background-origin: content-box    }</code></pre><p><img src="https://i.imgur.com/cGEPCMS.png" alt=""></p><h4 id="2-background-clip-背景裁剪"><a href="#2-background-clip-背景裁剪" class="headerlink" title="2.background-clip 背景裁剪"></a><font color="red">2.background-clip 背景裁剪</font></h4><p>   background-clip: border-box || padding-box || content-box || no-clip</p><p>效果:背景图片默认不裁剪 案例设置了背景图片的起始位置 为boder部分开始 </p><p>1.no-clip（默认值）; 不裁剪背景图片。</p><pre><code>div{    width: 600px;    height: 400px;     padding: 30px;    border: 50px solid rgba(104, 104, 98, .3);    background-image: url(&apos;./images/g.jpg&apos;);    background-repeat: no-repeat;    background-size: 100%;    background-clip: no-clip;}&lt;div&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/cIcEAfG.png" alt=""></p><p>2.padding-box; 保留padding + content 部分的背景图片将padding以外的背景图片裁剪掉</p><pre><code>div{    width: 600px;    height: 400px;     padding: 30px;    border: 50px solid rgba(104, 104, 98, .3);    background-image: url(&apos;./images/g.jpg&apos;);    background-repeat: no-repeat;    background-size: 100%;    background-clip: padding-box;}</code></pre><p><img src="https://i.imgur.com/5TTaZxn.png" alt=""></p><p>3.content-box; 保留content 部分的背景图片将content以外的背景图片裁剪掉</p><pre><code>    div{    width: 600px;    height: 400px;     padding: 30px;    border: 50px solid rgba(104, 104, 98, .3);    background-image: url(&apos;./images/g.jpg&apos;);    background-repeat: no-repeat;    background-size: 100%;    background-clip: content-box;}</code></pre><p><img src="https://i.imgur.com/JDUlVmS.png" alt=""></p><p>4.border-box; 保留border以内的背景图片将border以外的背景图片裁剪掉。</p><pre><code>        div{    width: 600px;    height: 400px;     padding: 30px;    border: 50px solid rgba(104, 104, 98, .3);    background-image: url(&apos;./images/g.jpg&apos;);    background-repeat: no-repeat;    background-size: 100%;    background-clip: border-box;}</code></pre><p><img src="https://i.imgur.com/fpuDeW0.png" alt=""></p><p> 注意: border-box和no-clip 的效果相同 但是含义不同</p><h4 id="3-background-size-背景图片大小"><a href="#3-background-size-背景图片大小" class="headerlink" title="3.background-size 背景图片大小"></a><font color="red">3.background-size 背景图片大小</font></h4><p>  background-size: cover || contain || 百分比 || 像素值</p><pre><code>div{    width: 600px;    height: 400px;     padding: 30px;    border: 10px solid rgba(104, 104, 98, .5);    background-image: url(&apos;./images/g.jpg&apos;);    background-repeat: no-repeat;}&lt;div&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/JmaEys4.png" alt=""></p><p>1.cover: 覆盖 图片会按照指定比例放大或缩小的填充,放大缩小的比例取决于图片的宽:放置的盒子的内容区的宽和图片的高:放置在盒子的内容区的高的大小的取较大的一个。</p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 10px solid rgba(104, 104, 98, .5);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: cover;    }</code></pre><p><img src="https://i.imgur.com/48yV8Pg.png" alt=""></p><p>2.contain: 包含 图片会按照指定比例扩大或缩小的填充,放大缩小的比例取决于图片的宽:放置的盒子的内容区的宽和图片的高:放置在盒子的内容区的高的大小的取较小的一个。</p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 10px solid rgba(104, 104, 98, .5);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: contain;    }</code></pre><p><img src="https://i.imgur.com/CHOZHYs.png" alt=""></p><p>3.一个具体像素值(若是百分比则表示相对于可显示区的大小)代表的是图片的宽度扩大或缩放到该像素值,而图片的宽高比是不变的</p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 10px solid rgba(104, 104, 98, .5);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: 210px;    }</code></pre><p><img src="https://i.imgur.com/Dmn7xVl.png" alt=""></p><p>4.两个具体像素值(若是百分比则表示相对于可显示区的大小)代表的是图片的宽度和高度分别缩放或扩大到指定像素值,图片的宽高比取决于设置的像素比</p><pre><code>div{        width: 600px;        height: 400px;         padding: 30px;        border: 10px solid rgba(104, 104, 98, .5);        background-image: url(&apos;./images/g.jpg&apos;);        background-repeat: no-repeat;        background-size: 400px 400px;    }</code></pre><p><img src="https://i.imgur.com/bRo38OL.png" alt=""></p><h4 id="4-background-image-背景图片"><a href="#4-background-image-背景图片" class="headerlink" title="4.background-image 背景图片"></a><font color="red">4.background-image 背景图片</font></h4><p>CSS3中可以通过background-image属性添加背景图片。</p><p>不同的背景图像和图像用逗号隔开，所有的图片中显示在最顶端的为第一张。</p><pre><code>&lt;style&gt;#examplel{        width: 658px;        height: 1059px;        background-image: url(&apos;./images/bg2.png&apos;),         url(&apos;./images/cat1.png&apos;), url(&apos;./images/cat2.png&apos;),         url(&apos;./images/cat3.png&apos;), url(&apos;./images/cat4.png&apos;),         url(&apos;./images/cat5.png&apos;), url(&apos;./images/cat6.png&apos;);        background-position: left top ,        left top, right top, center top,         left center, center, 200px 200px;        background-repeat: no-repeat;        padding: 15px;}&lt;/style&gt;&lt;div id=&quot;examplel&quot;&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/DlCySK9.png" alt=""></p><h4 id="5-background-position-背景定位"><a href="#5-background-position-背景定位" class="headerlink" title="5.background-position 背景定位"></a><font color="red">5.background-position 背景定位</font></h4><p>  background-position: left top || left bottom || right top || right bottom || center center || 像素值 || 百分比</p><p>(注: 没写的参数都是默认值center)</p><p>1.设置background-position:left top 代表背景图片要放在内容区的左上角的位置（默认值）</p><p>2.设置background-position: left; 将背景图片要放在内容区的左侧中间的位置 </p><p>   设置background-position: left bottom; 将背景图片要放在内容区的左下角的位置</p><p>3.设置background-position: right; 将背景图片要放在内容区的右侧中间的位置</p><p>4.设置background-position: right top; 将背景图片要放在内容区的右侧上角的位置</p><p>5.设置background-position: right bottom; 将背景图片要放在内容区的右侧下角的位置</p><p>6.设置background-position: center; 将背景图片要放在内容区中间的位置</p><p>7.设置background-position: 100px;       即沿x轴平移100px;</p><p>8.设置background-position: 100px 100px; 将背景图片要放在内容区水平位置100px 垂直位置100px的位置,即沿x轴平移100px，沿y轴平移100px</p><p>9.设置background-position: 20%;      将背景图片要放在内容区水平位置20%的位置。 </p><p>10.设置background-position: 20% 20%; 将背景图片要放在内容区水平位置20%，竖直位置20% 的位置。</p><p>第一个参数:0%是最左边 100%是最右边 中间平分。第二个参数： 0%是最上边，100%是最下边 中间平分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-background-origin-背景的起始位置&quot;&gt;&lt;a href=&quot;#1-background-origin-背景的起始位置&quot; class=&quot;headerlink&quot; title=&quot;1.background-origin 背景的起始位置&quot;&gt;&lt;/a&gt;&lt;font
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>margin合并与塌陷BUG及解法</title>
    <link href="http://yoursite.com/2018/11/13/margin%E5%90%88%E5%B9%B6%E4%B8%8E%E5%A1%8C%E9%99%B7BUG%E5%8F%8A%E8%A7%A3%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/13/margin合并与塌陷BUG及解法/</id>
    <published>2018-11-13T09:16:33.000Z</published>
    <updated>2018-12-13T07:39:16.226Z</updated>
    
    <content type="html"><![CDATA[<p>其实css也不是极其完善的，其中也存在着或多或少的bug，有些我们可能从来不会遇到，有些我们可能会经常遇到，这次介绍的两个bug是属于cssbug中的很经典的两个bug——margin合并与margin塌陷问题。</p><h4 id="margin合并现象"><a href="#margin合并现象" class="headerlink" title="margin合并现象"></a><font color="red">margin合并现象</font></h4><p>   • 我们现在写两个span标签，并且给它们两个分别加上margin-right和margin-left的样式。</p><pre><code> &lt;span class=”left”&gt;left&lt;/span&gt; &lt;span class=”right”&gt;right&lt;/span&gt; .left {    margin-right: 10px;    background-color: red;} .right {    margin-left: 10px;    background-color: yellow;}</code></pre><p><img src="https://i.imgur.com/hZPjk7D.png" alt=""></p><p>我们会发现，这两个span之间的距离正是我们所想的那样是20px的宽度，但是我们现在再写两个div，然后分别给它们加上<font color="red">margin-bottom</font>和<font color="red">margin-top</font>的样式，我们再来看看效果。</p><pre><code>&lt;div class=”top”&gt;top&lt;/div&gt;&lt;div class=”bottom”&gt;bottom&lt;/div&gt; .top {    margin-bottom: 10px;    background-color: red;}.bottom {    margin-top: 10px;    background-color: yellow;}</code></pre><p><img src="https://i.imgur.com/stB73S6.png" alt=""></p><p>这次我们惊奇的发现，<font color="red">这两个div上下之间的距离，并不是我们所想的那样是相加的20px，而是只有10px！</font></p><p>这个现象就是标题所说的<font color="red">margin上下合并现象</font>。</p><p>我们尝试改变每一个div的margin-top或者margin-bottom的值，最后发现：二者上下之间的距离是取得两个数值之中的<font color="red">最大值</font>。</p><p>如果div.top的margin-bottom是100px，div.bottom的margin-top是50px的话，那么二者之间的距离就是100px。</p><h4 id="margin塌陷现象"><a href="#margin塌陷现象" class="headerlink" title="margin塌陷现象"></a><font color="red">margin塌陷现象</font></h4><p>  • 我们现在写两个span标签，并且给它们两个分别加上margin-right和margin-left的样式。</p><pre><code>&lt;div class=”wrapper”&gt;  &lt;div class=”content”&gt;&lt;/div&gt;&lt;/div&gt; .wrapper {      width: 100px;      height: 100px;      margin-top: 100px;      margin-left: 100px;      background-color: yellow;    } .content {        width: 50px;        height: 50px;        margin-top: 50px;        margin-left: 50px;        background-color: red;    }</code></pre><p>我们写这段代码的原意是想要一个100100大小的父级div，然后里面有一个5050大小的子级div，然后让这个div在父级div的右下角，同时父级div距离浏览器的边框有100px的距离。</p><p><img src="https://i.imgur.com/zFVpZHv.png" alt=""></p><p>当我们运行这段代码的时候，我们会发现，子级div的margin-left生效了但是好像margin-top并没有生效？</p><p><img src="https://i.imgur.com/SyDpNRF.png" alt=""></p><p>其实并不是，margin-top也生效了，但是这里的margin-top的效果并不是我们所想的那样距离父级div的距离是50px，而是子级的div距离浏览器边框的距离是50px，由于本身父级div有一个margin-top的值，所以就导致了我们子级的margin-top的效果并没有显现出来，我们再改变一下子级div的margin-top的值，改成200px，我们又会惊奇的发现，子级div不仅没有距离父级div有了一段距离，<font color="red">反而带动了父级div一起向下移动了</font>！这就是margin塌陷现象。</p><h4 id="那么对于这两个问题我们要怎么解决呢？"><a href="#那么对于这两个问题我们要怎么解决呢？" class="headerlink" title="那么对于这两个问题我们要怎么解决呢？"></a><font color="red">那么对于这两个问题我们要怎么解决呢？</font></h4><p><strong><font color="red">margin塌陷的解法</font></strong></p><p>解法一共有两种：</p><p>1.利用<font color="red">border</font>来触发<font color="red">bfc</font>的效果。</p><p>2.利用<font color="red">overflow</font>属性来触发<font color="red">bfc</font>的效果。</p><p>• <font color="red">那么什么是bfc呢？</font></p><p>bfc全称是block format context——块级格式化上下文，我们有一些css语法会触发bfc，从而带来的效果是我们触发bfc的元素的渲染规则和普通元素的渲染规则变得不一样，从而可以解决塌陷问题。</p><p>margin塌陷的问题很容易让我们联想到，子级div之所以没有相对父级移动，是因为它看不到父级的边界，只能看到浏览器的边界，这样我们给父级加一个子级能看到的边界，这个问题是不是就解决了？</p><p>所以我们在父级div.wrapper里面添加一个属性<font color="blue">：border-top: 1px solid red;</font>现在我们再来看一下效果，发现果然content和wrapper解除了绑定，子级div能看到父级的边界了。但是这样就会改变父级div的样式，不符合开发要求，<font color="red">因此这种方法虽然可以解决问题但是是完全无法使用的</font>。</p><p>• <font color="red">什么又是overflow呢？</font></p><p>overflow是一个css属性，它可以设置当内容区超过了当前元素的区域的时候，我们采取怎样的处理方式，这个属性也可以触发bfc。</p><p>现在我们可以在父级div.wrapper里面加一条属性<font color="blue">：overflow:hidden;</font>这条属性的意思是溢出隐藏。现在我们可以发现，在外观没有改变的同时，子级div和父级div解除了绑定，也可能正常移动了！<font color="red">因此我们一般采用这种方式来解决margin塌陷的问题</font>。</p><p>虽然overflow:hidden;的方式可以采用，但是也不是没有缺点的，一旦我们用过js代码改变了子级div的位置，就会有导致子级一部分内容因为溢出被隐藏的风险。</p><p><strong><font color="red">margin合并的解法</font></strong></p><p>了解了margin塌陷的解法之后，我们就很容易可以理解margin合并的解法了。</p><p>我们给每一个div分别加上一个父级包裹层，然后给父级包裹层都加上<font color="red">overflow:hidden;</font></p><pre><code>&lt;div class=”wrapper”&gt;  &lt;div class=”top”&gt;top&lt;/div&gt;&lt;/div&gt;&lt;div class=”wrapper”&gt;  &lt;div class=”bottom”&gt;bottom&lt;/div&gt;&lt;/div&gt;  .wrapper{    overflow: hidden;  }  .top {    margin-bottom: 100px;    background-color: red;  }  .bottom {     margin-top: 100px;     background-color: red;  }</code></pre><p>这样通过父级div来触发bfc就可以解决margin合并的问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实css也不是极其完善的，其中也存在着或多或少的bug，有些我们可能从来不会遇到，有些我们可能会经常遇到，这次介绍的两个bug是属于cssbug中的很经典的两个bug——margin合并与margin塌陷问题。&lt;/p&gt;
&lt;h4 id=&quot;margin合并现象&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS之div居中方式</title>
    <link href="http://yoursite.com/2018/11/12/CSS%E4%B9%8Bdiv%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/CSS之div居中方式/</id>
    <published>2018-11-12T09:16:33.000Z</published>
    <updated>2018-12-13T07:39:07.108Z</updated>
    
    <content type="html"><![CDATA[<pre><code>    方法一:.wrapper {    position: relative;  }  .demo {    width: 200px;    height: 100px;    background: red;    position: absolute;    top: 50%;    left: 50%;    margin-top: -50px;    margin-left: -100px;  }&lt;div class=&quot;wrapper&quot;&gt;  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/div&gt;方法二:.wrapper {    position: relative;  }  .demo {    width: 200px;    height: 100px;    background: red;    position: absolute;    top: 50%;    left: 50%;    transform: translate(-50%, -50%);  }&lt;div class=&quot;wrapper&quot;&gt;  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/div&gt;方法三: .wrapper {    width: 500px;    height: 500px;    border: 1px solid black;    position: relative;  }  .demo {    width: 200px;    height: 100px;    background: red;    position: absolute;    top: 0;    bottom: 0;    left: 0;    right: 0;    margin: auto;  }&lt;div class=&quot;wrapper&quot;&gt;  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/div&gt;方法四:.wrapper {    width: 500px;    height: 500px;    border: 1px solid black;    display: flex;    align-items: center;    justify-content: center;  }  .demo {    width: 200px;    height: 100px;    background: red;  }&lt;div class=&quot;wrapper&quot;&gt;  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/div&gt;方法五:.wrapper {    width: 500px;    height: 500px;    border: 1px solid black;    line-height: 500px;    text-align: center;  }  .demo {    width: 200px;    height: 100px;    background: red;    display: inline-block;    vertical-align: middle;  }&lt;div class=&quot;wrapper&quot;&gt;  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;    方法一:
.wrapper {
    position: relative;
  }
  .demo {
    width: 200px;
    height: 100px;
    background: red;
    position:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS之switch控件</title>
    <link href="http://yoursite.com/2018/11/11/CSS%E4%B9%8Bswitch%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/11/11/CSS之switch控件/</id>
    <published>2018-11-11T09:16:33.000Z</published>
    <updated>2018-12-13T10:18:15.684Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/p6gJepo.png" alt=""><img src="https://i.imgur.com/C2YEtAp.png" alt=""></p><pre><code>&lt;style&gt;    .switch{        width: 400px;        height: 400px;        position: absolute;        left: 50%;        top: 50%;        margin-top: -200px;        margin-left: -100px;    }    .switch input{        display: none;    }    .switch label{        font-size: 100px;        position: absolute;        top: 20px;        display: block;    }    .switch label::before{        content: &apos;&apos;;        position: absolute;        width: 2em;        height: 1em;         left: 0;        border-radius: 50px;        background: #ff5000;        box-shadow: inset 0px 2px 5px rgba(238, 93, 10, 0.993);    }    .switch label::after{        content: &apos;&apos;;        position: absolute;        width: 1em;        height: 1em;        left: 0;        border-radius: 50px;        background: #fcfff4;        box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, .3);        transition: .8s;    }    #ckbx:checked +label::before{        background: #70c183;        box-shadow: inset 0px 1px 1px rgba(84, 153, 0, .3);    }    #ckbx:checked +label::after{        left: 1.1em;    }&lt;/style&gt;&lt;div class=&quot;switch&quot;&gt;    &lt;input type=&quot;checkbox&quot; id=&quot;ckbx&quot;&gt;    &lt;label for=&quot;ckbx&quot;&gt;&lt;/label&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/p6gJepo.png&quot; alt=&quot;&quot;&gt;&lt;img src=&quot;https://i.imgur.com/C2YEtAp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    .sw
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS图片代替文本</title>
    <link href="http://yoursite.com/2018/11/10/CSS%E5%9B%BE%E7%89%87%E4%BB%A3%E6%9B%BF%E6%96%87%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/11/10/CSS图片代替文本/</id>
    <published>2018-11-10T09:16:33.000Z</published>
    <updated>2018-12-13T07:38:44.014Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font color="red">在浏览网站时</font>有这样一种情况:</strong></p><p>如果可能网速不好的时候，如果本来要加载图片的位置加载不出来，而且用户需要点击改图片实现其他操作这个时候，无法点击图片怎么办?</p><p>我们用图片代替文本，在网速不好的时候或者没有CSS，JS的时候依然能使用或展示出来功能</p><pre><code>方法一:&lt;style&gt; a{      display: inline-block;      text-decoration: none;      color: #424242;      border:1px solid black;      background-image:url();      background-size: 190px 90px;      width: 190px;      height: 0px;            padding-top: 90px;          overflow: hidden;     }&lt;/style&gt;&lt;a href=&quot;http://www.taobao.com&quot; target=&quot;_blank&quot;&gt;淘宝网&lt;/a&gt;方法二:&lt;style&gt; a{      display: inline-block;      text-decoration: none;      color: #424242;      border:1px solid black;      background-image:url();      background-size: 190px 90px;      width: 190px;      height: 90px;      text-indent: 200px;         white-space: nowrap;        overflow: hidden;     }&lt;/style&gt;&lt;a href=&quot;http://www.taobao.com&quot; target=&quot;_blank&quot;&gt;淘宝网&lt;/a&gt;</code></pre><p>  因为padding可以展示图片</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;在浏览网站时&lt;/font&gt;有这样一种情况:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果可能网速不好的时候，如果本来要加载图片的位置加载不出来，而且用户需要点击改图片实现其他操作这个时候，无法点击图片怎么办?&lt;/p&gt;
&lt;p&gt;我们用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS定位与层模型</title>
    <link href="http://yoursite.com/2018/11/09/blog9/"/>
    <id>http://yoursite.com/2018/11/09/blog9/</id>
    <published>2018-11-09T09:16:33.000Z</published>
    <updated>2018-12-13T07:38:01.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="层模型"><a href="#层模型" class="headerlink" title="层模型"></a><center><font color="red" size="5">层模型</font></center></h3><p>css中元素的层次模型主要是由<font color="red">position</font>这个属性来决定的。</p><p>position属性：position的意思是定位，同样这个属性的作用就是<font color="red">给元素施加定位</font>。它一共有四个值，分别是<font color="red">static、absolute、relative、fixed</font>。</p><p><strong><font color="red" size="4">static</font></strong></p><p>• static是<font color="red">默认</font>的属性，当我们没有写position属性的时候，元素默认的定位就是static定位。</p><p><strong><font color="red" size="4">absolute</font></strong></p><p> • absolute是<font color="red">绝对定位</font>的意思，它会使元素<font color="red">脱离本来的位置</font>再进行定位，它会使元素像立交桥一样出现空间上的分层，当元素脱离原来的位置之后，其他的元素就会看不到这个元素。同时，<font color="red">absolute也可以触发bfc</font>。</p><p>• 同时，当我们改变定位之后，这个元素就有四个属性可以使用了，分别是<font color="red">left、right、top、bottom</font>。这四个属性分别可以设置当前元素距离左边、右边、上边和下边的距离为多少，但是四个属性很少一起出现，一般都是两两一对出现，其中left和top是一对，right和bottom是一对。</p><pre><code>div {  width: 100px;  height:100px;  position: absolute;  left: 100px;  top: 100px;}</code></pre><p>这个div就会脱离原来的位置，然后距离浏览器上边框和左边框分别100px的距离。</p><p> • 最后一点，absolute的参照物是<font color="red">距离它最近的有定位（除了static）的父级</font>，当每一个父级都没有定位的时候，元素会相对于<font color="red">浏览器边框</font>进行定位。</p><p><strong><font color="red" size="4">relative</font></strong></p><p>• relative是<font color="red">相对定位</font>的意思，它会让元素保留原来的位置再进行定位，后面的元素可以看到它本来的位置。</p><p>• 当position改成relative之后，left、top、right、bottom进行的定位就会变成<font color="red">相对于自身的位置</font>进行移动了。</p><p>• relative的<font color="red">参照物是元素自身</font>。</p><p>• 当我们仅仅给元素设置position:relative;并没有设置left、right、top、bottom属性的时候，元素的定位是没有发生任何改变的，因为这个特性，一般在开发中，<font color="red">relative都是用作设置参照物的</font>，一个absolute元素要相对于那个元素进行移动，就给那个元素设置relative的定位就可以了。</p><font color="red">我们通过例子来看一下absolute和relative的区别。</font><pre><code>&lt;div class=”wrapper”&gt;  &lt;div class=”box”&gt;        &lt;div class=”content”&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;.wrapper {   width: 200px;  height: 200px;  background-color: orange;  margin-top: 100px;  margin-left: 100px;}.box{      width:100px;      height: 100px;      background-color: black;      margin-left:100px;}.content{      width: 50px;      height: 50px;      background-color: yellow;}</code></pre><p>这个时候时候我们在浏览器中看到的样式是这个样子的：</p><p><img src="https://i.imgur.com/CqeccHD.png" alt=""></p><p>现在我们给content加上定位的样式。</p><pre><code>.content{  position:absolute;  left: 50px;  width: 50px;  height: 50px;  background-color: yellow;}</code></pre><p>这个时候浏览器中的样式就会发生改变，content那个黄色的小方块会跑到橘黄色的方块外面：</p><p><img src="https://i.imgur.com/gBrUDKu.png" alt=""></p><p>这是因为，当我们给content设置position:absolute;之后，浏览器在渲染的时候，会先向上找到box这个div，看看这个div有没有定位，因为没有，所以继续向上找wrapper，依然没有，再向上找body，还是没有，所以最后就是<font color="red">相对于浏览器边框定位</font>，这个时候content的left属性就是相对于浏览器边框左边有50px的距离的意思。</p><p>现在我们把content的定位换成relative，浏览器中的结果变成了这个样子：</p><p><img src="https://i.imgur.com/rHbXfuf.png" alt=""></p><p>本来content黄色小方块在黑色方块的左上角，然后relative相对与自身的位置进行定位，这个时候的left属性的意思就是相对于本来在黑色左上角的那个位置向右移动了50px的距离，也就是现在这个黄色小方块所在的位置。</p><p>因此，总结一下absolute和relative的特点如下：</p><p>• <font color="red"><strong>absolute：</strong></font></p><font color="red">1.脱离原来位置进行定位</font><font color="red">2.相对于最近的有定位的父级进行定位，如果没有那么相对于浏览器边框定位。</font><p>• <font color="red"><strong>relative：</strong></font></p><font color="red">1.保留原来位置定位</font><font color="red">2.相对于最近的有定位的父级进行定位</font><font color="red">一般被用来设置参照物</font><p><strong><font color="red" size="4">fixed</font></strong></p><p>fixed定位是<font color="red">相对于视口</font>的定位，我们在网页上都见过左右两边不随着滚轮滚动而改变位置的广告栏，这种广告栏就是用fixed定位的。</p><p><code>&lt;div class=”fixed”&gt;&lt;/div&gt;</code></p><pre><code>.fixed {  position: fixed;  right: 0px;  top: 200px;  height: 200px;  width: 50px;  background-color: red;}</code></pre><p>这段代码中，div.fixed这个元素就是一直在视口的右边，不随着我们滚动而改变相对于视口的位置。</p><p><strong><font color="red" size="4">最后提一点</font></strong></p><p>• 值得注意的是，当我们写这样一段代码的时候：</p><p><code>&lt;div class=”demo”&gt;&lt;/div&gt;</code></p><pre><code>.demo{  position: absolute;  margin-top: 200px;  height: 200px;  width: 50px;  background-color: red;}</code></pre><p>我们把absolute换成relative之后，会发现整个div会向上移动一小段距离，这是为什么呢？</p><p>答案其实就是<font color="red">margin合并</font>问题——body标签本身有8px的margin，而四个方向的margin自然包括了margin-bottom，我们为div.demo设置了margin-top，就会导致margin合并的问题发生，当position是relative的时候，并没有触发bfc，所以中间的距离会取二者的最大值，也就是200px，当position是absolute的时候，因为触发了bfc效果，从而消除掉margin合并的bug，因此中间的距离是200+8=208px。</p><p><strong><font color="red" size="4">一点小应用</font></strong></p><p>1.我们学习了定位之后，就可以实现前面文章提到的<font color="red">元素水平垂直居中</font>的效果了哟~</p><p>  只要我们给一个div加上下面的样式：</p><pre><code>div {  width: 100px;  height: 100px;  position: absolute;  left: 50%;  top: 50%;  margin-left: -50px;  margin-top: -50px;  background-color: red;}</code></pre><p>这个div就会在<font color="red">有定位的父级</font>里面是<font color="red">水平垂直居中</font>了哟~</p><p>2.我们还可以实现多栏布局了！</p><p>首先我们写三个div，分别起类名为left、mid、right，然后分别加上如下的样式：</p><font color="blue"><code>&lt;div class=”left”&gt;&lt;/div&gt;</code></font><font color="blue"><code>&lt;div class=”right”&gt;&lt;/div&gt;</code></font><font color="red"><code>&lt;div class=”mid”&gt;&lt;/div&gt;</code></font><pre><code>    * {  margin: 0px;  padding: 0px;}div {  height: 100px;}.left {  position: absolute;  left: 0;  width: 100px;  background-color: yellow;}.right {  position: absolute;  right: 0;  width: 100px;  background-color: #ffc;}.mid {  margin-left: 100px;  margin-right: 100px;  background-color: #fcc;}</code></pre><p><img src="https://i.imgur.com/78XewWd.png" alt=""></p><p>我们首先固定左侧和右侧的两个div，然后让中间的div分别给左侧和右侧留出一个固定宽度的margin之后，让自身自适应屏幕的大小即可实现三栏布局效果。</p><p>• 要注意的是，div.mid记得<font color="red">写在后面</font>，如果写在最前面的话，因为div是block块级元素会独占一行，这样就会把左侧和右侧的div给挤到下一行了。当然我们给.left和.right都加上<font color="red">top:0px;</font>之后，这个问题也就不用考虑了。</p><p>这次的层模型总结就到这里了，希望对大家有帮助哟~</p><font color="red"></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;层模型&quot;&gt;&lt;a href=&quot;#层模型&quot; class=&quot;headerlink&quot; title=&quot;层模型&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;层模型&lt;/font&gt;&lt;/center&gt;&lt;/h3&gt;&lt;p&gt;css中元素的层次模型主要是由
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS实现六边形效果</title>
    <link href="http://yoursite.com/2018/11/08/blog8/"/>
    <id>http://yoursite.com/2018/11/08/blog8/</id>
    <published>2018-11-08T08:29:58.000Z</published>
    <updated>2018-12-13T07:37:56.306Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a><font color="red">实现方案</font></h4><p><strong>思路:拆分成一个长方形和两个正方形</strong></p><ol><li><strong>三角形是正方形的一半</strong></li></ol><ol start="2"><li><strong>用伪元素实现一个正方形</strong></li></ol><ol start="3"><li><strong>旋转45度(transform:rotate(45deg))</strong></li></ol><p><img src="https://i.imgur.com/7LhlkSW.png" alt=""></p><pre><code>&lt;style&gt;    *{    margin: 0;    padding: 0;}div{    border-top: 2px solid #00f;    border-bottom: 2px solid #00f;    width: 200px;    height: 100px;    line-height: 100px;    position: relative;    top: 100px;    margin: 0 auto;    text-align: center;    vertical-align: middle;    background-color: crimson;}div::before{    content: &quot;&quot;;    width: 71px;    height: 71px;    position: absolute;    top: 14px;    left: -36px;    transform: rotate(45deg);    background-color: crimson;    border-left: 2px solid #00f;    border-bottom: 2px solid #00f;}div::after{    content: &quot;&quot;;    width: 71px;    height: 71px;    position: absolute;    top: 14px;    right: -36px;    transform: rotate(45deg);    background-color: crimson;    border-right: 2px solid #00f;    border-top: 2px solid #00f;}       &lt;/style&gt;                      &lt;div&gt;aaa&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现方案&quot;&gt;&lt;a href=&quot;#实现方案&quot; class=&quot;headerlink&quot; title=&quot;实现方案&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;实现方案&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;思路:拆分成一个长方形和两个正方形&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS实现微信对话框</title>
    <link href="http://yoursite.com/2018/11/07/blog7/"/>
    <id>http://yoursite.com/2018/11/07/blog7/</id>
    <published>2018-11-07T08:29:58.000Z</published>
    <updated>2018-12-13T07:37:49.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a><font color="red">实现原理</font></h4><p><strong>此效果利用了一个高度、宽度均为0的伪元素实现。</strong></p><p><strong>当某元素的高度、宽度均为0,并且设置边框之后,其边框将变为4个顶角相对的三角形,如下图</strong></p><p><img src="https://i.imgur.com/hAfGuSn.png" alt=""></p><pre><code>&lt;style&gt;    .box{        height: 0;        width: 0;        border: 100px solid;        border-color: #25a23b #abcdef #0000ff crimson;    }&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/7nd7UsQ.png" alt=""></p><pre><code>&lt;style&gt;.demo{      position: relative;      left: 200px;      max-width: 150px;      max-height: 90px;      background: #25a23b;      -webkit-border-radius: 5px;      -moz-border-radius: 5px;      border-radius: 5px;      font-size: 14px;      padding: 5px;      color: white;      word-break: break-word;    }    .demo::before{        content: &quot;&quot;;        position: absolute;        width: 0;        height: 0;        left: -18px;        top: 17px;        border: 9px solid;        border-color: transparent #25a23b transparent transparent;    }&lt;/style&gt;&lt;div class=&quot;demo&quot;&gt;background background background background background   background &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;实现原理&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;此效果利用了一个高度、宽度均为0的伪元素实现。&lt;/stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS常用布局</title>
    <link href="http://yoursite.com/2018/11/06/blog6/"/>
    <id>http://yoursite.com/2018/11/06/blog6/</id>
    <published>2018-11-06T08:29:58.000Z</published>
    <updated>2018-12-13T07:37:44.543Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a><font color="red">常用布局</font></h4><p><strong><font color="red">“display”属性</font></strong></p><p>  display 是CSS中最重要的用于控制布局的属性</p><ol><li><font color="red">display:block</font><p>div 是一个标准的<font color="red">块级</font>元素。一个块级元素会新开始一行并且尽可能撑满容器。而且block元素可以设置其高度与宽度。</p><p>(h1-h6 p ol ul li div form table address等)</p></li><li><font color="red">display:inline</font><p>span 是一个标准的<font color="red">行内</font>元素。一个行内元素可以在段落中 <span> 像这样 </span> 包裹一些文字而不会打乱段落的布局</p><p>inline元素无法设置其高度与宽度，它的高度和宽度完全取决于其内容的高和宽(a em strong br span select)</p></li><li><font color="red">display:inline-block</font><p>inline-block 综合了inline和block两种属性的特质,既可以给其设置宽高，又让其不会独占行。而且可以用这个属性模拟float进行布局</p></li><li><font color="red">display:none</font><p>display:none 通常被 JavaScript 用来在<font color="red">不删除元素的情况下隐藏或显示元素</font>。它和visibility属性不一样,把display设置成none元素不会占据它本来应该显示的空间,但是设置成visibility: hidden;<font color="red">还会占据空间</font>。</p></li></ol><p><strong><font color="red">水平居中</font></strong></p><p>  #main{ width: 600px; margin: 0 auto;}</p><p><font color="red">设置块级元素的 width 可以防止它从左到右撑满整个容器</font>。然后你就可以设置左右外边距为auto来使其<font color="red">水平居中</font>。<br>元素会占据你所指定的宽度,然后剩余的宽度会一分为二成为左右外边距。</p><p>  #main{ max-width: 600px; margin: 0 auto;}</p><p><font color="red">当浏览器窗口比元素的宽度还要窄时</font> 在这种情况下使用max-width替代width可以使浏览器更好地处理小窗口的情况。</p><p><strong><font color="red">盒模型</font></strong></p><p>当你设置了元素的宽度，实际展现的元素却超出你的设置:这是因为元素的边框和内边距会撑开元素。<br>看下面的例子，两个相同宽度的元素显示的实际宽度却不一样。</p><p>  <style><br>  .small{<br>            width: 500px;<br>            height: 300px;<br>            margin: 20px auto;<br>            background-color: pink;<br>            box-sizing: border-box;<br>        }<br>        .big{<br>            width: 500px;<br>            height: 300px;<br>            margin: 20px auto;<br>            padding: 50px;<br>            border: 10px solid black;<br>            background-color: crimson;<br>        }<br>  </style><br>  <div class="small"></div><br>  <div class="big"></div></p><p><img src="https://i.imgur.com/pU3yaUM.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;常用布局&quot;&gt;&lt;a href=&quot;#常用布局&quot; class=&quot;headerlink&quot; title=&quot;常用布局&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;常用布局&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;“display”属性
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS溢出文本打点展示</title>
    <link href="http://yoursite.com/2018/11/05/blog5/"/>
    <id>http://yoursite.com/2018/11/05/blog5/</id>
    <published>2018-11-05T08:29:58.000Z</published>
    <updated>2018-12-13T07:37:37.147Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/B4Yhu4R.png" alt=""></p><h4 id="1-单行文本"><a href="#1-单行文本" class="headerlink" title="1.单行文本"></a>1.单行文本</h4><pre><code>p{   white-space: nowrap;//强制不换行      overflow: hidden;      text-overflow: ellipsis;}</code></pre><h4 id="2-多行文本"><a href="#2-多行文本" class="headerlink" title="2.多行文本"></a>2.多行文本</h4><p>多行文本要<font color="red">截断</font></p><pre><code>p{    height: n;    line-height: n/2; //要放几行就除多少    voerflow: hidden;  }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/B4Yhu4R.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-单行文本&quot;&gt;&lt;a href=&quot;#1-单行文本&quot; class=&quot;headerlink&quot; title=&quot;1.单行文本&quot;&gt;&lt;/a&gt;1.单行文本&lt;/h4
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS美化checkbox</title>
    <link href="http://yoursite.com/2018/11/04/blog4/"/>
    <id>http://yoursite.com/2018/11/04/blog4/</id>
    <published>2018-11-04T08:29:58.000Z</published>
    <updated>2018-12-13T07:37:30.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/G7TYoeP.png" alt=""></p><pre><code>&lt;style&gt;    .myCheck{        display: none;    }    .myleb{        display: inline-block;        width: 16px;        height: 16px;        position: relative;        border: 1px solid #abcdef;        border-radius: 15%;        margin-right: 3px;        vertical-align: middle;    }    .myleb::before{        content: &quot;&quot;;        width: 10px;        height: 10px;        position: absolute;        top: 3px;        left: 3px;        background-color: #abcdef;        border-radius: 15%;        display: none;    }    .myCheck:checked+.myleb::before{        display: block;    }&lt;/style&gt;&lt;label for=&quot;cb1&quot;&gt;    &lt;input type=&quot;checkbox&quot; class=&quot;myCheck&quot; name=&quot;cb1&quot; id=&quot;cb1&quot;&gt;    &lt;span for=&quot;cb1&quot; class=&quot;myleb&quot;&gt;&lt;/span&gt;熊猫&lt;/label&gt;&lt;label for=&quot;cb2&quot;&gt;        &lt;input type=&quot;checkbox&quot; class=&quot;myCheck&quot; name=&quot;cb2&quot; id=&quot;cb2&quot;&gt;        &lt;span for=&quot;cb2&quot; class=&quot;myleb&quot;&gt;&lt;/span&gt;老虎&lt;/label&gt;&lt;label for=&quot;cb3&quot;&gt;        &lt;input type=&quot;checkbox&quot; class=&quot;myCheck&quot; name=&quot;cb3&quot; id=&quot;cb3&quot;&gt;        &lt;span for=&quot;cb3&quot; class=&quot;myleb&quot;&gt;&lt;/span&gt;大象&lt;/label&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/G7TYoeP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    .myCheck{
        display: none;
    }
    .myleb{
  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3之盒子模型</title>
    <link href="http://yoursite.com/2018/11/03/blog3/"/>
    <id>http://yoursite.com/2018/11/03/blog3/</id>
    <published>2018-11-03T09:16:33.000Z</published>
    <updated>2018-12-13T10:09:25.938Z</updated>
    
    <content type="html"><![CDATA[<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><font color="red">盒子模型</font></h4><p>css中的每个元素都是一个盒模型,包括html body元素,浏览器解析css的时候也会把每个元素看成一个盒子来解析</p><p>盒模型具备的属性有：<font color="red"> content 、padding 、margin、border 、background</font> 等</p><h4 id="盒模型的分类"><a href="#盒模型的分类" class="headerlink" title="盒模型的分类"></a><font color="red">盒模型的分类</font></h4><ol><li><font color="red">border-box</font>: 俗称混杂盒模型</li><li><font color="red">content-box</font>: 是w3c组织定义的盒模型</li></ol><p>IE6混杂盒模型: 触发怪异模式 怪异模式下可以给行内元素加宽高,图片的padding值会失效 margin:0 auto不好使</p><p>触发怪异模式并不能让页面对页面中的盒子用IE6混杂盒模型来解析 怎么能用IE6混杂模式盒模型来解析呢 ? 怪异模式 + IE6浏览器<br>css3中的可以选择盒模型的类型: box-sizing: border-box/content-box;</p><pre><code>&lt;style&gt; *{        margin: 0;        padding: 0;    }    .wrapper{        width: 960px;        color: #fff;        font-size: 30px;        text-align: center;        /* 后加 */        background: #ccc;        box-sizing: border-box;    }    #header{        height: 100px;        background: black;        margin-bottom: 10px;        /* 后加 */        padding: 10px;        width: 100%;        box-sizing: border-box;    }    .sidebar{        float: left;        width: 220px;        height: 300px;        margin-right: 20px;        margin-bottom: 10px;        background: greenyellow;        /* 后加 */         padding: 10px;        border: 1px solid #000;         box-sizing: border-box;    }    .content{        float: left;        width: 720px;        height: 300px;        margin-bottom: 10px;        background: red;        box-sizing: border-box;    }    #footer{        background: burlywood;        height: 100px;        clear: both;        box-sizing: border-box;    }&lt;/style&gt;&lt;div class=&quot;wrapper&quot;&gt;    &lt;div id=&quot;header&quot;&gt;header&lt;/div&gt;    &lt;div class=&quot;sidebar&quot;&gt;侧边栏&lt;/div&gt;    &lt;div class=&quot;content&quot;&gt;内容区&lt;/div&gt;    &lt;div id=&quot;footer&quot;&gt;底部&lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/ekky5oz.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;headerlink&quot; title=&quot;盒子模型&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;盒子模型&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;css中的每个元素都是一个盒模型,包括html body元素,浏览器解析c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html标签介绍</title>
    <link href="http://yoursite.com/2018/11/02/blog2/"/>
    <id>http://yoursite.com/2018/11/02/blog2/</id>
    <published>2018-11-02T09:16:33.000Z</published>
    <updated>2018-12-13T07:37:21.198Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章大概介绍了一下html的一些知识，这一篇打算开始正式介绍html里面的一些标签结构了。</p><p> html中的标签数量是很多的，据人统计大概有300个左右，并且每年都会以20-30个的速度增加着，但是这么多的标签我们不必都去记住，因为很多标签都是不常用的或者可以用基础的标签搭配组合，实际上我们需要掌握的大概在<font color="red">30</font>个左右。</p><font color="red">在前端开发中我们要知道，并不是你用的技术多么先进就显得多么厉害，我们要考虑到代码的可读性以及后期的可维护性，用常见的标签来写才会让其他人都能读懂你的代码。</font><p>代码中还有一点很重要的就是要勤写<font color="red">注释</font>哟~ 顺便一提在html中的注释形式是&lt;! – – your code – – &gt;</p><p>（这里的标签都是属于html4中的内容，html5会有新的标签和新的内容，我在后面的文章中再介绍。）</p><h4 id="几个基础的标签"><a href="#几个基础的标签" class="headerlink" title="几个基础的标签"></a><font color="red">几个基础的标签</font></h4><ul><li><strong><font color="red">p标签</font></strong></li></ul><p><code>&lt;p&gt;&lt;/p&gt;</code>是段落标签，在<code>&lt;p&gt;&lt;/p&gt;</code>中间写的内容会当做一个段落来处理。<br>p标签的特点是<font color="red">独占一行</font>，并且段落上下都会有一定的<font color="red">间隔</font>距离。</p><ul><li><strong><font color="red">标题标签 h1-h6</font></strong></li></ul><p>标题标签的作用是着重显示文字，一般用在标题上，它会将里面的文字<font color="red">加粗放大</font>并且<font color="red">独占一行</font>。其中<font color="red">h4</font>的默认大小是<font color="red">正常的文字大小</font>，不过是加粗的。<br><code>&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h5&gt;&lt;/h5&gt;&lt;h6&gt;&lt;/h6&gt;</code></p><ul><li><strong><font color="red">strong标签</font></strong></li></ul><p><code>&lt;strong&gt;&lt;/strong&gt;</code>标签的作用是将里面的文字<font color="red">加粗</font>处理。</p><ul><li><strong><font color="red">em标签</font></strong></li></ul><p><code>&lt;em&gt;&lt;/em&gt;</code>的作用是将里面的文字变成<font color="red">斜体</font>。</p><ul><li><strong><font color="red">del标签</font></strong></li></ul><p><code>&lt;del&gt;&lt;/del&gt;</code>是删除标签，它会在里面的文字的<font color="red">中间画一条横线</font>，一般在<font color="red">打折</font>的时候使用。</p><ul><li><strong><font color="red">address 标签</font></strong></li></ul><p><code>&lt;address&gt;&lt;/address&gt;</code>是地址标签，它会将里面的内容变成<font color="red">斜体</font>并且<font color="red">独占一行</font>。</p><p>这六个是很基础很简单的标签，作用也是显而易见，还有另外一种<font color="red">结构化标签</font>，它们没有特殊的效果，而是用来<font color="red">当做容器来盛放其他的标签</font>，这有点类似于每个家庭中都会单独分出来厨房卧室大厅等区域，然后每个区域中还有各种各样的设备，这里的家庭中的区域就是我们的结构化标签的作用。</p><p>结构化标签还有另外一个作用就是用来<font color="red">为里面的子元素设置样式</font>。一般的元素如果某一条属性没有被开发者设置样式的话，它会自动继承父级元素的相应属性的样式。</p><p>比如我们现在有三个p标签，我们想让三个p标签里面的文字都变成红色，给三个p标签都写上color:red 是非常麻烦的，最简单的方法是将三个p标签都放到一个结构化标签里面，给这个结构化标签一个color:red的样式，这样里面的三个p标签就都会有这个样式了。</p><p>这两点作用是最常见的，因此我们在写一个页面之前，<font color="red">最先考虑的就是结构问题</font>，因此一般<font color="red">先写结构化标签</font>。</p><h4 id="下面我们就介绍最常见的两个结构化标签。"><a href="#下面我们就介绍最常见的两个结构化标签。" class="headerlink" title="下面我们就介绍最常见的两个结构化标签。"></a><font color="red">下面我们就介绍最常见的两个结构化标签。</font></h4><ul><li><strong><font color="red">div</font></strong></li></ul><p><code>&lt;div&gt;&lt;/div&gt;</code>标签可以说是我们在前端开发中用的最多的标签了。</p><ul><li><strong><font color="red">span</font></strong></li></ul><p><code>&lt;span&gt;&lt;/span&gt;</code>标签里面多数情况下盛放文字或者小icon之类的小物件。</p><p>我们现在为div标签设置一下样式，并且在中间加一些文字。</p><p><code>&lt;div style=”width: 100px; height:100px; background-color: red”&gt;</code>这是一个实例的结构化标签，一切正常<code>&lt;/div&gt;</code></p><p>我们发现文字会在这个div标签的<font color="red">边界处自动换行</font>，也就是说这个div标签圈定了一个范围，里面的文字或者其他标签都默认在这个范围里面显示。</p><p>但是当我们在中间书写的不是中文而是<font color="red">一串英文字符</font>的时候，我们会发现这一串英文字符在div的边界处并没有换行，而是一直显示下去，这是为什么呢？</p><h4 id="文字分隔符与编码集"><a href="#文字分隔符与编码集" class="headerlink" title="文字分隔符与编码集"></a><font color="red">文字分隔符与编码集</font></h4><ul><li>这是因为我们的每一个汉字，计算机都会认出来是一个单独的单词，每一个汉字都会默认地和其他汉字分隔开，但是英文字母却不会默认地分隔开，因为计算机不知道多少个英文字母才算是一个单词，因此我们需要手动为其添加分隔符。</li></ul><p>而这个分隔符我们也不陌生，就是我们常用的<font color="red">空格</font>，只要我们在这一串字符中间加几个空格，那么被空格隔开的字符就会被当做是一个单词从而与其他的单词分隔开。</p><p>那么现在问题来了，空格的作用是当做分隔符来使用，并不是我们所想的那种空白的一个格，那么我们怎么在html中写空白格呢？</p><ul><li>这里我们就要提到一个名词叫做<font color="red">编码集</font>了。我们在书写html的时候，很多特殊的符号是无法写出来的，这个时候我们只能用编码来让浏览器识别我们所想的符号。编码的格式是<font color="red">&amp;编码;</font> 千万不能忘记后面的分号哟~</li><li>空格的编码就是&nbsp; 当我们写多个&nbsp;的时候，在页面中我们也就可以看到多个空白格了。</li><li>其次，用来当做标签的尖括号&lt;&gt;也是无法正常通过符号来显示出来的，我们同样需要用编码集让浏览器识别出来。&lt; 小于号的编码是<font color="red"><code>&amp;lt;</code></font> less than的意思，同理，&gt; 大于号的编码时<font color="red"><code>&amp;gt;</code></font> great than的意思。我们只要在html中写这两个编码，那么大于号和小于号就可以正常显示出来了哟~我记得有一个表情是 &gt;_&lt;~</li><li>同样的，回车也是属于分隔符，在html中回车是没有作用的，我们想要在网页上让文字显示出回车换行的效果的话，编码同样也是没有办法实现的，我们需要一个标签叫做<font color="red"><code>&lt;br&gt;标签</code></font>，这个标签的作用就是换行。w3c标准中提到：<code>&lt;br&gt;</code> 标签是空标签（意味着它没有结束标签，因此这是错误的：<code>&lt;br&gt;&lt;/br&gt;</code>）。在 XHTML 中，把结束标签放在开始标签中，也就是 <code>&lt;br /&gt;</code>。</li></ul><h4 id="一些重要的标签"><a href="#一些重要的标签" class="headerlink" title="一些重要的标签"></a><font color="red">一些重要的标签</font></h4><ul><li><strong><font color="red">ol li</font></strong></li></ul><p><code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code>这是一组标签，它们二者都是成对出现的，每一个标签单独出现都是没有意义的事情。</p><p>这一组标签叫做<font color="red">有序列表</font>，<strong>ol是外面的列表框，li是里面的子项，并且每一个li子项的前面都会带有序号。</strong></p><pre><code>&lt;ol&gt;&lt;li&gt;q&lt;/li&gt;                      1.q&lt;li&gt;w&lt;/li&gt;                      2.w&lt;li&gt;e&lt;/li&gt;                      3.e&lt;/ol&gt;</code></pre><p>ol有一个属性叫做<font color="red">type属性</font>，这个属性的作用是用来设置每一个子项前面的显示内容的。默认情况下按照数字来排序的，我们可以改成type=”a” ，这样前面序号是按照小写字母来排序的。</p><pre><code>a.qb.wc.e</code></pre><p>同样的，type的属性值还可以设置成<font color="red">A</font>–&gt;按照大写字母来排序；<font color="red">I</font>—&gt;按照i的个数来排序（罗马数字？）；I—&gt;大写I的个数来排序，除此之外，设置成其他的属性都是错误的，而错误的情况下ol会按照默认的数字来排序，2和b等都算是错误的值哟~</p><ul><li>ol的第二个属性叫做<font color="red">reversed</font>属性，当我们给ol加上<font color="red">reversed=”reversed”</font>的时候，子项就会变成倒序来排列。这个属性直接写reversed也是可以的，不过我同样认为reversed=”reversed”才是规范的写法。</li><li>ol的第三个属性叫做<font color="red">start</font>属性，<strong>这个属性的意思是我们让子项从第几个序号开始显示，当我们写start=”2″的时候，前面的序号就会变成2、3、4 而不是默认的1、2、3，字母也是同样的道理。</strong></li></ul><p>但是有一个很重要的问题就是，我们在哪个网页看到文字前面有这些什么数字啊字母啊的序号吗？</p><p>所以最后的结果就是，我们<font color="red">基本很少用到ol、li标签</font>哟~</p><ul><li><strong><font color="red">ul li</font></strong></li></ul><p><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></p><p>这一组标签是无序列表，除了前面的序号都变成了点（• ）之外，其他的和有序列表基本一样。</p><ul><li>ul同样有一个<font color="red">type属性</font>，这个属性的值设置的是每一个子项前面显示的符号的形式，默认的值是<font color="red">disc</font>圆点，当值是<font color="red">square</font>的时候，前面显示的就是小方块，值是<font color="red">circle</font> 的时候前面显示的就是空心圆圈。</li></ul><p>但是同样的道理，我们也没有在哪个网页上看到文字前面带有这些恶心的圆点方块之类的，因此我们在使用ul、li标签的时候，都会先把ul的默认样式list-style改成none，<font color="red">list-style: none</font>;不过这已经属于css的部分了~</p><p>无序列表一般用来当做导航栏之类的，里面的结构样式都一样的部分，像淘宝什么的网页的导航栏就都是用ul、li来写的。</p><pre><code>我的淘宝  购物车 收藏夹 商品分类  |  卖家中心 联系客服  网站导航</code></pre><ul><li><strong><font color="red">a</font></strong></li></ul><p><code>&lt;a&gt;&lt;/a&gt;</code>标签是一个非常重要的标签，它有一个必须写的属性叫做<font color="red">href</font> —&gt;<font color="red">hyperText reference</font>  超文本链接，里面写的是地址。</p><p>a的英文单词是anchor锚点的意思，因此这个标签的作用主要有两点：</p><ol><li><font color="red">定点跳转我们指定的id的元素位置</font>。这个用法需要我们在href中写上id的值  <code>&lt;a href=”#clickme”&gt;</code>点击我跳转<code>&lt;/a&gt;</code>这样就会跳转到那个id是clickme的元素的位置</li><li><font color="red">超链接</font>。我们自href中写一个本地的或者网上的链接，比如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ，这样我们点击的时候就会跳转到这个网页上去了。</li><li><font color="red">协议限定符</font>。在href中我们可以写javascript代码，比如href=”javascript:while(1){alert(‘你中毒了’)}”，当我们写上这行代码的时候，我们点击这个a标签之后浏览器就会一直弹出对话框。</li></ol><p>通常在<font color="red">移动端</font>我们都用a标签来<font color="red">调用接口</font>，比如：href=”<font color="red">phoneto</font>:12234512345″ 调用手机的拨号功能来拨打电话，像美团外卖之类的就是用的这个功能。</p><p>a标签默认的是<font color="red">蓝色</font>的字体并且带有<font color="red">下划线</font>，我们在页面初始化的时候通常也习惯与将a标签的颜色和下划线的默认属性都去掉。</p><ul><li><strong><font color="red">img</font></strong></li></ul><p><code>&lt;img&gt;&lt;/img&gt;</code>标签是image图片的意思，它有一个必备的属性叫做<font color="red">src</font> –-&gt;source，这个src属性的值就是我们的图片的地址。一般来说我们给src填写两种值：</p><ol><li><font color="red">网上</font>的链接</li><li><font color="red">本地</font>的链接</li></ol><p>说道本地的链接就不得不提到本地链接的书写形式。本地链接分为两种：<font color="red">相对地址</font>和<font color="red">绝对地址</font>绝对地址。而绝对地址我们通常是不用的，因为当文件上传到服务器上的时候，凡是用绝对地址写的链接统统都会失效的，因此我们都要<font color="red">选择相对地址</font>。</p><p>相对地址中 <font color="red">../的意思是返回当前文件的上一层目录 ，./的意思是当前文件所在的目录</font>，比如说我们有一张图片和这个html文件在同一个文件夹下面，那么我们就可以写&lt;img src=”./tupian.png”&gt;</p><p>同时这个图片标签还有两个属性。</p><ol><li><font color="red">alt属性</font>。<strong>这个属性是为其设置图片占位符，也就是说当图片因为网速或者链接错误等原因加载不出来的时候，就会显示alt里面我们设置的值。</strong></li><li><font color="red">title属性</font>。<strong>图片提示符。当我们鼠标移入图片的时候，在鼠标旁边会出现一个黄色的小方块来显示这个title属性里面设置的值。</strong></li></ol><p>以上就是几个比较重要的标签的介绍了，还有一个不太常见也不太重要但是需要了解的标签，<font color="red">table标签</font>。</p><ul><li><strong><font color="red">table</font></strong></li></ul><p><code>&lt;table&gt;&lt;/table&gt;</code>是一个三级结构标签，它要搭配<code>&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;</code>这两个标签一起使用才可以。</p><p>table是表格的意思，<code>&lt;table&gt;&lt;table&gt;</code>这个标签就是设置外层的表格，然后tr是表格的行，td是表格的数据单元，我们可以理解为列。</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p>table标签的大概结构是这个样子的，同时td还有几个属性。</p><ol><li><font color="red">cellpadding</font> 内边距属性，我们可以为每一个单元格都设置内边距 cellpadding=”10px”;</li><li>.<font color="red">cellspacing</font> 属性，这个属性的作用规定单元之间的空间，当我们设置为0的时候就可以去掉边线了。</li><li><font color="red">colspan</font> 属性，这个属性规定了这一个td占了几个单位，默认的一个td占一个单位，类似于excel中的合并单元格的作用。</li></ol><p>我们现在一般都不用table标签了，这是一个<font color="red">结构化标签</font>，以前用这个标签来给页面进行<font color="red">布局</font>，但是现在我们直接用<font color="red">div + css</font>来对页面进行布局。</p><p><strong><font color="red">那么为什么我们要弃用table标签呢？</font></strong></p><p>说道这里我们就不得不提一下异步和同步的概念</p><p>在生活中，我们常说的异步是指顺序的干两件事情，比如先吃饭，再玩游戏；同步的意思是同时干，一边吃饭一边打游戏。</p><font color="red">但是在计算机领域中，异步指的是生活中的同步，同时加载的意思，同步则是生活中的顺序加载的意思。</font><p>table的缺点在于服务器把代码加载到本地服务器的过程中，本来是加载一行执行一行，但是table标签是里面的东西<font color="red">全都下载完之后才会显示出来</font>，那么如果图片很多的话就会导致网页一直加载不出来，除非所有的图片和内容都加载完。以前的手机网速慢，厂家重视内容的展现而不是样式的展现，所以那个时候用table，而现在网速很快，大家都重视用户体验，当我们浏览淘宝店铺的时候，如果要等到所有的图片全都加载完之后才显示出来的话那也太蠢了，所以table标签现在我们基本放弃使用了。</p><p>但是基本不使用不代表不使用，有些情况下还是可以用table标签的哟~</p><h4 id="最后我们再来介绍一个非常重要的标签——表单"><a href="#最后我们再来介绍一个非常重要的标签——表单" class="headerlink" title="最后我们再来介绍一个非常重要的标签——表单"></a><font color="red">最后我们再来介绍一个非常重要的标签——表单</font></h4><font color="red"><code>&lt;form&gt;&lt;/form&gt;</code></font>表单元素，这个元素可以让我们实现前端和后台的数据交互。<br><br>我们通过form表单向后台发送数据，数据都是由两部分组成的：<font color="red">数据名+数据内容</font>。<br><br>表单都是成组出现的，里面有各种各样的元素。<br><br><font color="red">我们先介绍一下form表单元素拥有的属性：</font><ol><li><font color="red">action属性</font> 填写服务器地址，这个属性的意思是我们把数据传递到那个服务器。</li><li><font color="red">method属性</font>传输方法，我们在这里填写通过什么方式来传输数据，一般填写的都是POST/GET这两种中的一个，虽然有其他的方式但是用的韩少，而post和get的区别我们在网络篇会有介绍，这里我们暂时都先写get方法吧。</li></ol><font color="red">介绍完属性之后，我们再介绍一下表单拥有的子元素：</font><ul><li><strong><font color="red">input标签</font></strong> 这个标签是一个单标签，不需要闭合。</li></ul><p>这个标签有一个type属性，而这个属性的值决定了这个input标签的类型是什么。</p><ol><li><font color="red">text</font>  如果type=”text”的话，这个input标签就是一个输入框，我们可以在里面输入文字信息。</li><li><font color="red">password</font> 如果type=”password “的话，这个input标签就是一个密码框，我们在里面输入的文字信息都会以隐藏的形式展现出来。</li><li><font color="red">submit</font> 如果type=”submit “的话，这个input标签就是一个提交按钮，我们点击这个提交按钮之后就会把整个表单的数据发送到后台服务器上了。</li></ol><p>我们刚才提到了发送数据一定要有数据名和<font color="red">数据内容</font>，数据内容就是我们给input标签设置的<font color="red">value属性</font>的值，而数据名我们就需要在input标签里面写一个<font color="red">name属性</font>来告诉浏览器我们这个数据的名字是什么了。</p><p>这里我们写一个简单的<font color="red">用户提交的表单</font>：</p><pre><code>&lt;form action=&quot;url&quot; method=&quot;get&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;uname&quot; id=&quot;name&quot;&gt;    &lt;input type=&quot;password&quot; name=&quot;pwd&quot; id=&quot;pwd&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;确认提交&quot; class=&quot;btn&quot;&gt;&lt;/form&gt;</code></pre><p>在浏览器上的显示内容是这个样子的：</p><form action="url" method="get"><br><input type="text" name="uname" id="name"><br><input type="password" name="pwd" id="pwd"><br><input type="submit" value="确认提交" class="btn"><br></form><p>当我们随便写一个用户名和密码之后点击提交按钮，我们会发现我们的网页地址上后面出现了我们所传递的数据的信息。</p><p>?username=123&amp;password=123 这里我们很容易就可以看出来数据的名字和数据的内容了。</p><p><strong><font color="red">同时，input还有其他的数据形式：</font></strong></p><ul><li><font color="red">type=”radio”</font></li><li><font color="red">type=”checkbox”</font></li></ul><p>radio是<font color="red">单选框</font>的意思，当我们给一个input设置radio的type之后，它就会变成一个圆点，我们可以选择这个圆点，但是我们写很多的单选框的时候，他们似乎都可以被选中，并没有单选的作用。<font color="red">这里是因为我们还没有为这一组单选框设置名字</font>，<strong>当我们给几个radio都设置了同一个name的时候，它们就会变得只能选择一个了的单选框了。</strong></p><pre><code>&lt;input type=&quot;radio&quot; name=&quot;r&quot; value=&quot;A&quot; checked=&quot;checked&quot;/&gt;A&lt;input type=&quot;radio&quot; name=&quot;r&quot; value=&quot;B&quot; checked=&quot;checked&quot;/&gt;B&lt;input type=&quot;radio&quot; name=&quot;r&quot; value=&quot;C&quot; checked=&quot;checked&quot;/&gt;C</code></pre><p><input type="radio" name="r" value="A" checked="checked">A</p><p><input type="radio" name="r" value="B">B</p><p><input type="radio" name="r" value="C">C</p><p>checkbox是<font color="red">复选框</font>的意思，当input的type值设置成这个之后，和radio一样的道理，设置好数据的名字，我们可以同时选择很多的选项。    </p><pre><code>&lt;input type=&quot;checkbox&quot; name=&quot;f&quot; value=&quot;&quot;/&gt;苹果&lt;input type=&quot;checkbox&quot; name=&quot;f&quot; value=&quot;&quot;/&gt;橘子&lt;input type=&quot;checkbox&quot; name=&quot;f&quot; value=&quot;&quot;/&gt;葡萄</code></pre><p><input type="checkbox" name="f" value="">苹果</p><p><input type="checkbox" name="f" value="">橘子</p><p><input type="checkbox" name="f" value="">葡萄</p><ul><li>当我们开发的时候，我们其实是需要为每一项属性都设置一个<font color="red">默认的值</font>的，像sex这种单选框，我们设置一个默认值之后，就会有一半的用户不需要去更改这个选项，会极大地提高用户体验。</li><li>设置这个默认的值的方法就是添加一个<font color="red">checked=”checked”属性</font>，我们在哪一个input标签里面设置了这个属性，那么哪一个选项就是默认被选择的状态</li></ul><p>最后我们还有一个下拉列表的标签<code>&lt;select&gt;&lt;/select&gt;</code></p><pre><code>&lt;select&gt;    &lt;option&gt;武汉&lt;/option&gt;    &lt;option&gt;上海&lt;/option&gt;     &lt;option&gt;北京&lt;/option&gt;&lt;/select&gt;</code></pre><select><br><option>武汉</option><br><option>上海</option><br><option>北京</option><br></select><p>下拉列表的<font color="red">name属性</font>是写在<font color="red"><code>&lt;select&gt;</code></font>标签上的，里面option中间填写的内容就是默认的数据值，但是如果我们给每一个option都加一个<font color="red">value属性</font>的话，那么option中间添加的文字则不作为传递的数据的值，value的值作为传递的数据的值，同时下拉列表的默认选中的是第一个选项，如果我们要改变默认选项的话，要添加的属性是<font color="red">selected=”selected”</font><strong>而不是上面的checked。</strong></p><p>那么我所总结的比较常用的重要的标签主要就有以上几种了，希望对大家有帮助哟~</p><h4 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a><font color="red">标签的分类</font></h4><p>html的标签主要分为两类：</p><ol><li><font color="red">行级/内联/行内元素 display: inline;</font><p> 这一类元素的特点是：</p> <font color="red">   •  不独占一行，元素所占空间完全由内容所控制</font>   <font color="red">• 不可以改变宽高</font><p> 标签代表有：a em br select span strong select</p></li><li><font color="red">块级元素 display: block;</font><p> 这一类元素的特点是：</p>  <font color="red">   • 独占一行，无论内容多还是少</font>   <font color="red">• 可以改变宽高</font><p> 标签代表有：h1-h6 p ol ul li div form table address等</p></li></ol><p>其实还有第三种标签，这一类标签<font color="red">既不属于行级元素也不属于块级元素</font>，它们<font color="red">既不独占一行</font><br>，又可以<font color="red">随意改变宽高</font>，比如<font color="red"><code>&lt;img&gt;&lt;input&gt;</code></font>标签。</p><font color="red"></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章大概介绍了一下html的一些知识，这一篇打算开始正式介绍html里面的一些标签结构了。&lt;/p&gt;
&lt;p&gt; html中的标签数量是很多的，据人统计大概有300个左右，并且每年都会以20-30个的速度增加着，但是这么多的标签我们不必都去记住，因为很多标签都是不常用的或者
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html初识</title>
    <link href="http://yoursite.com/2018/11/01/blog1/"/>
    <id>http://yoursite.com/2018/11/01/blog1/</id>
    <published>2018-11-01T09:16:33.000Z</published>
    <updated>2018-12-13T07:37:18.763Z</updated>
    
    <content type="html"><![CDATA[<p> 最近在复习以前学习的所有的前端知识点，总结一下，希望也对初学者有一些帮助。</p><h4 id="首先我们都听说过html，那么什么东西是html呢"><a href="#首先我们都听说过html，那么什么东西是html呢" class="headerlink" title="首先我们都听说过html，那么什么东西是html呢?"></a><font color="red">首先我们都听说过html，那么什么东西是html呢?</font></h4><ul><li>html的全称是hyperText markup language， 超文本标记语言，在网页中所有的文字图片和组织架构都是由html来编写的，当然html能够完成的工作不止有这些。</li><li>需要注意的是html并不是一种编程语言，它只是一种计算机语言，html不具备像c/c++/java等编程语言中的变量或者函数等东西，它仅仅由标签组成。 <code>&lt;html&gt; &lt;/html&gt;</code></li><li>标签中的闭合标签可以和前面的标签直接写成一个单标签形式，或者直接不写，浏览器也是可以识别的，但是这样不规范，最好写完整的闭合标签。</li><li>最后，由于html并不是编程语言，没有编译过程，所以我们可以用任何可以写字的软件来编写比如txt，不过我们一般使用<font color="green">sublime</font> 或者<font color="green"> vs code</font> 这两个软件编写前端程序~</li></ul><h4 id="其次，我们可能会听说过css样式这个词语，那么什么又是css呢？"><a href="#其次，我们可能会听说过css样式这个词语，那么什么又是css呢？" class="headerlink" title="其次，我们可能会听说过css样式这个词语，那么什么又是css呢？"></a><font color="red">其次，我们可能会听说过css样式这个词语，那么什么又是css呢？</font></h4><ul><li>css是层叠样式表的意思，html的布局、样式修饰和一些简单的动画都是由css完成的。</li></ul><h4 id="最后我们还知道一门语言叫做javascript，那么javascript又是做什么的呢？"><a href="#最后我们还知道一门语言叫做javascript，那么javascript又是做什么的呢？" class="headerlink" title="最后我们还知道一门语言叫做javascript，那么javascript又是做什么的呢？"></a><font color="red">最后我们还知道一门语言叫做javascript，那么javascript又是做什么的呢？</font></h4><ul><li>javascript作用是实现人机交互作用，具体的我们在javascript部分介绍。(其实javascript与java并没有什么关系哟~)</li></ul><h4 id="认识了html、css和js以及他们的功能之后，我们正式进入html的学习部分。"><a href="#认识了html、css和js以及他们的功能之后，我们正式进入html的学习部分。" class="headerlink" title="认识了html、css和js以及他们的功能之后，我们正式进入html的学习部分。"></a><font color="red">认识了html、css和js以及他们的功能之后，我们正式进入html的学习部分。</font></h4><ul><li>前面我们提到过html语言里面的都是标签，而html这个标签则是根标签，其他的东西都要放在这个标签里面编写，次一级的两个结构是head标签和body标签 –&gt; <code>&lt;head&gt;&lt;/head&gt; , &lt;body&gt;&lt;/body&gt;</code> ， head是给浏览器看的，body是给整个页面的主体部分，我们其他的展示出来的东西一般都放在body标签下面。</li></ul><p>这个时候我们创建一个txt文件，把后缀改成html在里面写好html、head、body标签之后就可以在body里面随便写一些文字了，然后用自己的浏览器打开这个文件，我们就可以发现在页面上显示出来我们所写的文字了。</p><pre><code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;qwert...&lt;/body&gt;&lt;/html&gt;</code></pre><p>但是这个时候有一个问题，我们输入英文是没有问题很正常的显示，<font color="red">但是中文就会变成一堆乱码</font>，这是由于此时的浏览器还不识别中文字符，我们还需要加一些东西，设置编码格式。</p><ul><li>编码格式是通过<code>&lt;meta&gt;</code>标签来设置的，我们在<code>&lt;head&gt;</code>中添加一个<code>&lt;meta&gt;</code>标签，注意这个标签不需要写闭合标签，然后我们为meta设置一个属性chatset=”utf-8″ : <code>&lt;meta charset = “utf-8”&gt;</code></li><li>我们再来介绍一下编码集。编码集主要有gbk、gb2312、unicode、utf-8。gb2312是国标2312条，可以识别简中日韩等亚洲语言，gbk是国标扩展，可以识别繁体中文，unicode是万国码，世界各国语言都包括在内，现在的unicode的升级版本是<font color="red">utf-8</font>， 全称是 unicode transformation format 公用的是这个编码格式，可以识别所有的语言，所以前面三个基本不用(反正我没见过…)。</li><li>我们还可以在根标签<code>&lt;html&gt;</code>里面来加一条属性lang 来告诉搜索引擎爬虫我们网站使用什么语言写的，zh-cn是中文，en是英文，一般二者一起写en,zn-cn ——&gt;<code>&lt;html lang=”en, zh-cn”&gt;</code></li><li>其实meta还有很多其他的用处，比如设置移动端的页面显示大小，为网页被搜索的时候设置关键字等等。</li></ul><p>下面我们介绍一下<code>&lt;head&gt;</code>标签里面的另一个标签，<code>&lt;title&gt;</code></p><ul><li><code>&lt;title&gt;</code>标签是用来改变页面的标题的，每一个网页都有自己的名字，这个名字就是通过<code>&lt;title&gt;</code>标签设置的。我们现在在<code>&lt;head&gt;&lt;/head&gt;</code>里面加一个<code>&lt;title&gt;</code>HelloWorld<code>&lt;/title&gt;</code>来看看效果，网页的标题已经变成HelloWorld了哟~ </li></ul><h4 id="最后我们介绍一下非常非常重要的专业素养：当前世界上的主流浏览器都有什么呢？"><a href="#最后我们介绍一下非常非常重要的专业素养：当前世界上的主流浏览器都有什么呢？" class="headerlink" title="最后我们介绍一下非常非常重要的专业素养：当前世界上的主流浏览器都有什么呢？"></a><font color="red">最后我们介绍一下非常非常重要的专业素养：当前世界上的主流浏览器都有什么呢？</font></h4><ul><li>ie这个我们都知道,微软的绑定浏览器</li><li>chrome 这个我们也都知道，谷歌浏览器，我们开发一般都用chrome来调试，因此每一个前端工程师都要有一个chrome哟~</li><li>firefox 火狐浏览器</li><li>opera 这是欧洲的一个浏览器，特点是兼容性很强</li><li>safari 我们也都知道</li><li>主流浏览器只有以上5个！(UC搜狗什么的都不是哟~)</li></ul><font color="red">&nbsp;&nbsp;&nbsp;&nbsp;浏览器  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内核</font><ul><li><font color="red">ie  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trident</font></li><li><font color="red">chrome  &nbsp;&nbsp;Blink/webkit</font></li><li><font color="red">firefox  &nbsp;&nbsp;&nbsp;&nbsp;Gecko</font></li><li><font color="red">opera  &nbsp;&nbsp;&nbsp;&nbsp;presto</font></li><li><font color="red">safari  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webkit</font></li></ul><p>谷歌以前和safari一起开发过所以以前用的是webkit，现在已经把webkit里面的核心内容提取出来单独做了一款新的内核叫做Blink。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 最近在复习以前学习的所有的前端知识点，总结一下，希望也对初学者有一些帮助。&lt;/p&gt;
&lt;h4 id=&quot;首先我们都听说过html，那么什么东西是html呢&quot;&gt;&lt;a href=&quot;#首先我们都听说过html，那么什么东西是html呢&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
  </entry>
  
</feed>
